# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

## API Integration Lessons

- When using FormData for file uploads, don't set Content-Type header manually - let browser handle it
- For api.reserse.id, always use VITE_API_KEY in X-API-Key header
- For flow.reserse.id, use VITE_PERKABA_API_KEY
- Set appropriate file size limits (50MB) for image uploads in nginx and vite config
- Use relative URLs with proxy in vite.config.ts instead of absolute URLs
- Add all required domains to allowedHosts in vite.config.ts (api.reserse.id, flow.reserse.id, app.reserse.id)
- Configure allowedHosts in both server and preview mode
- Use wildcard subdomain (.reserse.id) for broader access
- Set proper hostname in docker and nginx configs

## Security Lessons

- Add rate limiting in nginx (10r/s with burst 20)
- Block unnecessary paths (/webui, /geoserver, /admin, etc.)
- Add security headers (X-Frame-Options, X-Content-Type-Options, X-XSS-Protection)
- Configure robots.txt to disallow all
- Handle favicon.ico and .git requests properly
- Filter proxy paths in vite.config.ts to only allow needed routes

## Project Structure Lessons

From project.md:
- Follow consistent service pattern for new agents:
  - Service file in src/services/
  - Agent config in src/data/agents/
  - Page component in src/pages/
  - Update Sidebar.tsx and App.tsx
- Use existing components:
  - ChatInterface for chat functionality
  - AgentCard for agent display
  - BaseAgentForm for forms
- Maintain consistent styling with Tailwind CSS
- Handle chat message formatting:
  - Use flex-wrap and min-w-0 to prevent overflow
  - Add pre-wrap for code blocks and pre elements
  - Make tables scrollable horizontally
  - Use word-break and overflow-wrap for long content
- Agent configuration best practices:
  - Add descriptive icons that match agent functionality
  - Use consistent color schemes for related agents
  - Keep form heights appropriate for expected input length
  - Include clear placeholder text in form fields

## Environment Configuration Lessons

- Use default values in env.ts for critical variables
- Keep API keys secure and never log them
- Use separate keys for different services:
  - VITE_API_KEY for api.reserse.id
  - VITE_PERKABA_API_KEY for flow.reserse.id
  - VITE_OPENAI_API_KEY for OpenAI
  - etc.

## Performance Optimization Lessons

- Use code splitting with manual chunks for vendor, UI, and feature code
- Enable proper caching headers in nginx for static assets
- Configure gzip compression for text-based assets
- Preload critical assets in index.html
- Use resource hints (preconnect) for external APIs
- Optimize build settings in vite.config.ts
- Use immutable cache for versioned assets
- Disable caching for API endpoints while keeping static asset caching
- Use different cache strategies for different content types
- Keep HTTP/2 benefits without affecting API responses

## Docker Deployment Lessons

- Use multi-stage builds to reduce final image size
- Configure proper healthchecks for container monitoring
- Set resource limits to prevent container abuse
- Use nginx:alpine as production base image
- Enable logging rotation to prevent disk space issues
- Configure Docker networks with specific names and gateways
- Clean up unused networks before redeploying
- Use production-specific nginx configuration
- Use npm ci for faster, reliable builds
- Enable nginx caching for static assets
- Configure proper resource limits for production
- Use HTTP/2 for better performance
- Enable brotli compression for better compression ratios

## UI/UX Lessons

- Handle long content in chat messages:
  - Use flex-wrap for message containers
  - Add min-w-0 to flex children to enable text truncation
  - Make code blocks and pre elements wrap properly
  - Enable horizontal scroll for tables
  - Use proper word breaking for different content types
- Consider different AI response formats:
  - Code blocks
  - Tables
  - Long URLs
  - Formatted text
  - Lists and indentation
- Add chat-message class for consistent styling across components
- Use TypeScript interfaces for better type safety and documentation
- Remove unused imports to improve code cleanliness
- Visual consistency:
  - Use meaningful icons for each agent type
  - Maintain consistent color schemes
  - Adjust form sizes based on expected content
  - Provide clear visual hierarchy
- Agent icon implementation:
  - Icons should be defined in AgentCard.tsx's getAgentIcon function
  - Use Lucide icons consistently across all agents
  - Follow color scheme patterns (e.g., indigo for analytics, blue for research)
  - Keep icon size consistent (24px)
  - Don't define icons in individual agent files
  - Use proper icon that represents agent's function (e.g., BarChart3 for trend analysis)

# Scratchpad

Current Task: Optimizing API Security and Performance

[X] Update API key usage across services
[X] Configure nginx security settings
[X] Add rate limiting
[X] Block unnecessary paths
[X] Update file upload handling
[X] Configure CORS properly
[X] Add security headers
[X] Update vite proxy configuration
[X] Document lessons learned

Next Steps:
- Monitor API usage and adjust rate limits if needed
- Consider adding more security headers if required
- Review and optimize file upload performance