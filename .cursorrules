# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When using external packages like `@google/genai`, always import and use their existing type definitions instead of creating custom interfaces that may conflict. For example, use `import { GroundingChunk } from "@google/genai"` instead of defining a custom GroundingChunk interface.
- Remove unused variables and parameters to prevent TypeScript warnings:
  * Remove unused regex patterns that are declared but never used
  * Use underscore (_) for unused parameters in forEach loops instead of named parameters
  * Clean up unused imports to prevent TypeScript errors

## API Integration Lessons

- When using FormData for file uploads, don't set Content-Type header manually - let browser handle it
- For api.reserse.id, always use VITE_API_KEY in X-API-Key header
- For flow.reserse.id, use VITE_PERKABA_API_KEY
- Set appropriate file size limits (50MB) for image uploads in nginx and vite config
- Use relative URLs with proxy in vite.config.ts instead of absolute URLs
- Add all required domains to allowedHosts in vite.config.ts (api.reserse.id, flow.reserse.id, app.reserse.id)
- Configure allowedHosts in both server and preview mode
- Use wildcard subdomain (.reserse.id) for broader access
- Set proper hostname in docker and nginx configs

## PenyidikAi Agent Implementation Pattern

Untuk menambahkan agen baru di PenyidikAi.tsx, ikuti langkah-langkah berikut:

1. Buat Service File (src/services/[agentName]Service.ts):
   - Import env dan uuid
   - Gunakan FormData untuk request body
   - Implementasikan retry logic untuk error jaringan dan server
   - Gunakan endpoint `/v1/playground/agents/[endpoint-name]/runs`
   - Implementasikan fungsi sendChatMessage, clearChatHistory, dan initializeSession
   - Contoh:
   ```typescript
   const formData = new FormData();
   formData.append('message', message.trim());
   formData.append('agent_id', 'fismondev-chat');
   formData.append('stream', 'false');
   formData.append('monitor', 'false');
   formData.append('session_id', currentSessionId);
   formData.append('user_id', currentSessionId);
   ```

2. Buat Konfigurasi Agen (src/data/agents/[agentName]Agent.ts):
   - Gunakan interface ExtendedAgent
   - Tentukan id, name, type, status, dan description
   - Tambahkan icon dan iconClassName
   - Contoh:
   ```typescript
   export const fismondevAgent: ExtendedAgent = {
     id: 'fismondev_001',
     name: 'Fismondev AI',
     type: 'fismondev_chat',
     status: 'on',
     description: 'Asisten AI yang fokus pada tindak pidana di bidang Fiskal, Moneter, dan Devisa',
     icon: DollarSign,
     iconClassName: 'text-green-600',
     fields: []
   };
   ```

3. Update Types (src/types/index.ts):
   - Tambahkan tipe agen baru ke union type AgentType
   - Contoh: `| 'fismondev_chat'`

4. Update Utils (src/utils/utils.ts):
   - Tambahkan ID agen ke AGENT_IDS
   - Tambahkan case di getAgentTypeFromId
   - Contoh:
   ```typescript
   FISMONDEV_CHAT: 'fismondev_001'
   ```

5. Update AgentCard (src/components/AgentCard.tsx):
   - Tambahkan case di getAgentIcon
   - Gunakan ikon yang sesuai
   - Contoh:
   ```typescript
   case 'fismondev_chat':
     return <img src="/img/krimsus.png" alt="Fismondev AI" className="h-10 w-10" />;
   ```

6. Update PenyidikAi Component (src/pages/PenyidikAi.tsx):
   - Import agen dan service
   - Tambahkan agen ke array agents
   - Tambahkan case di renderContent
   - Tambahkan styling yang sesuai
   - Contoh:
   ```typescript
   case 'fismondev_chat':
     return <ChatInterface sendMessage={sendFismondevChatMessage} />;
   ```

7. Styling Konsisten:
   - Gunakan gradient yang sesuai dengan jenis agen
   - Pertahankan konsistensi visual dengan agen lain
   - Contoh:
   ```typescript
   agent.type === 'fismondev_chat'
     ? "bg-gradient-to-br from-green-50 to-emerald-50 hover:from-green-100 hover:to-emerald-100"
     : "bg-gradient-to-br from-purple-50 to-indigo-50 hover:from-purple-100 hover:to-indigo-100"
   ```

## Security Lessons

- Add rate limiting in nginx (10r/s with burst 20)
- Block unnecessary paths (/webui, /geoserver, /admin, etc.)
- Add security headers (X-Frame-Options, X-Content-Type-Options, X-XSS-Protection)
- Configure robots.txt to disallow all
- Handle favicon.ico and .git requests properly
- Filter proxy paths in vite.config.ts to only allow needed routes

## Project Structure Lessons

From project.md:
- Follow consistent service pattern for new agents:
  - Service file in src/services/
  - Agent config in src/data/agents/
  - Page component in src/pages/
  - Update Sidebar.tsx and App.tsx
- Use existing components:
  - ChatInterface for chat functionality
  - AgentCard for agent display
  - BaseAgentForm for forms
- Maintain consistent styling with Tailwind CSS
- Handle chat message formatting:
  - Use flex-wrap and min-w-0 to prevent overflow
  - Add pre-wrap for code blocks and pre elements
  - Make tables scrollable horizontally
  - Use word-break and overflow-wrap for long content
- Agent configuration best practices:
  - Add descriptive icons that match agent functionality
  - Use consistent color schemes for related agents
  - Keep form heights appropriate for expected input length
  - Include clear placeholder text in form fields

## Chat Agent Implementation Pattern

When adding a new chat-based agent to the UndangUndang component, follow these steps:

1. Create Service File (src/services/[agentName]Service.ts):
 - Import env config and uuid
 - Configure API constants (API_KEY, MAX_RETRIES, etc.)
 - Implement session management
 - Implement parseResponse function for handling responses
 - Implement sendChatMessage with FormData and proper error handling
 - Add clearChatHistory and initializeSession functions

2. Update Types (src/types/index.ts):
 - Add new agent type to AgentType union (e.g., 'ciptakerja_chat')

3. Update Utils (src/utils/utils.ts):
 - Add agent ID to AGENT_IDS constant
 - Add case in getAgentTypeFromId
 - Don't add to getTypeDisplay if it's a chat agent (these use custom display names)

4. Update Agent Card (src/components/AgentCard.tsx):
 - Add case in getAgentIcon with appropriate Lucide icon
 - Choose an icon that represents the agent's function
 - Use consistent icon size (24px)
 - Give icon an appropriate color

5. Update UndangUndang Component (src/pages/UndangUndang.tsx):
 - Import new service's sendChatMessage
 - Add agent to agents array with proper configuration
 - Add case in renderContent switch statement
 - Configure card styling:
   * Use professional color gradients
   * Maintain visual hierarchy
   * Ensure contrast and readability
   * Keep consistent hover effects
   * Match icon and colors to agent's purpose

6. Follow Best Practices:
 - Maintain consistent error handling
 - Use proper session management
 - Implement proper logging
 - Follow API security guidelines
 - Use professional color schemes appropriate for police applications
 - Ensure visual consistency with existing agents

Professional Color Scheme Examples:
- Financial Services (P2SK): blue-indigo gradient (from-blue-50 to-indigo-50)
- Criminal Law (KUHP): rose-orange gradient (from-rose-50 to-orange-50)
- Technology Law (ITE): cyan-sky gradient (from-cyan-50 to-sky-50)
- Labor Law (Cipta Kerja): slate-gray gradient (from-slate-50 to-gray-50)

## Environment Configuration Lessons

- Use default values in env.ts for critical variables
- Keep API keys secure and never log them
- Use separate keys for different services:
  - VITE_API_KEY for api.reserse.id
  - VITE_PERKABA_API_KEY for flow.reserse.id
  - VITE_OPENAI_API_KEY for OpenAI
  - VITE_GEMINI_API_KEY for Google Gemini API (sentiment analysis)
  - VITE_SUPABASE_URL for Supabase URL
  - VITE_SUPABASE_ANON_KEY for Supabase Anon Key
  - etc.

## API Key Security Lessons

⚠️ **CRITICAL SECURITY PRACTICES:**
- **NEVER hardcode API keys in source code files**
- **NEVER commit .env files to version control**
- **NEVER log actual API key values, even partially**
- **ALWAYS use environment variables for sensitive credentials**

### Security Patterns:
```typescript
// ✅ CORRECT - Use environment variables
const API_KEY = import.meta.env.VITE_GEMINI_API_KEY;

// ✅ CORRECT - Safe logging
console.log('API Key status:', API_KEY ? 'Available' : 'Missing');

// ❌ WRONG - Never expose actual key values
console.log('API Key:', API_KEY); // DANGEROUS!
console.log('API Key prefix:', API_KEY.substring(0, 5)); // STILL DANGEROUS!

// ❌ WRONG - Never hardcode keys
const API_KEY = 'AIzaSyBf4_0ll5H7OMs7yAtgXO1LWVAWhOcbJmo'; // NEVER DO THIS!
```

### .gitignore Requirements:
- Ensure `.env` files are in .gitignore
- Ensure `.env.local`, `.env.production.local` etc. are ignored
- Provide `.env.example` with placeholder values for new developers

### Emergency Response for Exposed Keys:
1. **Immediately revoke/regenerate** the exposed API key
2. **Remove key from all files** including documentation and comments
3. **Search entire codebase** for any hardcoded key references
4. **Check git history** and remove exposed keys from commits
5. **Update .env.example** with proper placeholder values
6. **Audit all logging statements** to ensure no key exposure

## Performance Optimization Lessons

- Use code splitting with manual chunks for vendor, UI, and feature code
- Enable proper caching headers in nginx for static assets
- Configure gzip compression for text-based assets
- Preload critical assets in index.html
- Use resource hints (preconnect) for external APIs
- Optimize build settings in vite.config.ts
- Use immutable cache for versioned assets
- Disable caching for API endpoints while keeping static asset caching
- Use different cache strategies for different content types
- Keep HTTP/2 benefits without affecting API responses

## Docker Deployment Lessons

- Use multi-stage builds to reduce final image size
- Configure proper healthchecks for container monitoring
- Set resource limits to prevent container abuse
- Use nginx:alpine as production base image
- Enable logging rotation to prevent disk space issues
- Configure Docker networks with specific names and gateways
- Clean up unused networks before redeploying
- Use production-specific nginx configuration
- Use npm ci for faster, reliable builds
- Enable nginx caching for static assets
- Configure proper resource limits for production
- Use HTTP/2 for better performance
- Enable brotli compression for better compression ratios

## UI/UX Lessons

- Handle chat interface layout:
  - Use flex-wrap and min-w-0 for message containers to prevent overflow
  - Avoid nested scrollbars by using whitespace-pre-wrap and break-words
  - Use single scrollable container at the top level with proper bottom padding (pb-32)
  - Keep input area fixed at bottom with position: fixed
  - Let content flow naturally with proper word breaking
  - Keep tables and code blocks within container width
  - Use space-y utilities for consistent message spacing
  - Ensure enough bottom padding to prevent content from being hidden under input area
- Consider different AI response formats:
  - Code blocks
  - Tables
  - Long URLs
  - Formatted text
  - Lists and indentation
- Add chat-message class for consistent styling across components
- Use TypeScript interfaces for better type safety and documentation
- Remove unused imports to improve code cleanliness
- Visual consistency:
  - Use meaningful icons for each agent type
  - Maintain consistent color schemes
  - Adjust form sizes based on expected content
  - Provide clear visual hierarchy
- Agent icon implementation:
  - Icons should be defined in AgentCard.tsx's getAgentIcon function
  - Use Lucide icons consistently across all agents
  - Follow color scheme patterns (e.g., indigo for analytics, blue for research)
  - Keep icon size consistent (24px)
  - Don't define icons in individual agent files
  - Use proper icon that represents agent's function (e.g., BarChart3 for trend analysis)
  - For custom SVG icons:
    * Place SVG files in public/img directory
    * Reference in img src with absolute path from public (e.g., "/img/google-scholar.svg")
    * Keep original SVG colors if they match the design
    * Maintain consistent size with w-6 h-6 classes (24px)
- ChatPage implementation best practices:
  - Use consistent structure across all ChatPage components
  - Follow the same pattern for message handling, formatting, and display
  - Use conditional rendering for UI elements that should appear/disappear based on state
  - Hide example questions after user starts chatting (messages.length > 1)
  - Use proper spacing and layout for different screen sizes
  - Ensure proper sidebar spacing with lg:pl-64 to prevent overlap
  - Use max-w-3xl mx-auto for content centering
  - Implement proper scrolling behavior with requestAnimationFrame
  - Use consistent styling for message bubbles, info panels, and input areas
  - Provide clear visual feedback for user actions (copying, sending messages)
  - Use aria-label attributes for better accessibility
  - Remove unused imports to prevent TypeScript errors
- UndangUndang ChatPage implementation pattern:
  - Create dedicated ChatPage components for each agent type (e.g., KUHPChatPage)
  - Use consistent color schemes that match the agent's domain:
    * KUHP (Criminal Law): rose-600 (red) theme
    * P2SK (Financial Services): blue-600 (blue) theme
    * ITE (Technology Law): cyan-600 (light blue) theme
    * Cipta Kerja (Labor Law): slate-600 (gray) theme
    * Kesehatan (Health Law): emerald-600 (green) theme
    * Fidusia (Insurance Law): orange-600 (orange) theme
  - Customize welcome messages and example questions for each agent's domain
  - Maintain consistent UI structure across all ChatPage components
  - Use the same formatMessage function for consistent markdown rendering
  - Implement proper session management with initializeSession and clearChatHistory
  - Use consistent error handling and loading states

### File Upload Implementation Patterns

1. State Management untuk File Upload:
   ```typescript
   // State untuk tracking file
   const [selectedFiles, setSelectedFiles] = useState<File[]>([]);
   // State untuk progress
   const [progress, setProgress] = useState<{status: string, percent: number}>({
     status: 'preparing',
     percent: 0
   });
   const [showProgress, setShowProgress] = useState(false);
   ```

2. Implementasi File Input dan Handler:
   ```typescript
   // Ref untuk input file yang disembunyikan
   const fileInputRef = useRef<HTMLInputElement>(null);
   
   // Handler untuk perubahan file
   const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
     if (e.target.files) {
       const filesArray = Array.from(e.target.files);
       setSelectedFiles(prev => [...prev, ...filesArray]);
     }
   };
   
   // Handler untuk menghapus file
   const handleRemoveFile = (indexToRemove: number) => {
     setSelectedFiles(prev => prev.filter((_, index) => index !== indexToRemove));
   };
   
   // Fungsi untuk membuka dialog file
   const handleOpenFileDialog = () => {
     if (fileInputRef.current) {
       fileInputRef.current.click();
     }
   };
   ```

3. Komponen Progress Bar:
   ```typescript
   // Progress bar component
   const ProgressBar = ({ percent = 0, status = 'uploading' }) => {
     const getStatusText = () => {
       switch (status) {
         case 'preparing': return 'Mempersiapkan...';
         case 'uploading': return 'Mengunggah file...';
         case 'processing': return 'Memproses dokumen...';
         case 'completed': return 'Selesai!';
         default: return 'Memproses...';
       }
     };
     
     const getColor = () => {
       switch (status) {
         case 'completed': return 'bg-green-500';
         case 'processing': return 'bg-blue-500';
         case 'uploading': return 'bg-amber-500';
         default: return 'bg-blue-500';
       }
     };
     
     return (
       <div className="w-full mb-3">
         <div className="flex justify-between items-center mb-1">
           <span className="text-sm font-medium text-gray-700">{getStatusText()}</span>
           <span className="text-sm font-medium text-gray-700">{percent}%</span>
         </div>
         <div className="w-full bg-gray-200 rounded-full h-2.5">
           <div 
             className={`h-2.5 rounded-full ${getColor()} transition-all duration-500 ease-in-out`} 
             style={{ width: `${percent}%` }}
           ></div>
         </div>
       </div>
     );
   };
   ```

4. UI Elements untuk File Upload:
   ```typescript
   {/* File Upload Button */}
   <button
     type="button"
     onClick={handleOpenFileDialog}
     disabled={isProcessing}
     className="absolute left-2 bottom-3 p-2 rounded-lg text-gray-500 hover:text-blue-500 hover:bg-blue-50 transition-colors z-20"
     aria-label="Upload file"
   >
     <Paperclip className="w-5 h-5" />
   </button>
   
   {/* Hidden file input */}
   <input 
     type="file" 
     ref={fileInputRef}
     onChange={handleFileChange}
     className="hidden"
     multiple
     accept=".pdf,.doc,.docx,.txt,.csv,.xls,.xlsx,.jpg,.jpeg,.png"
   />
   
   {/* File Preview Area */}
   {selectedFiles.length > 0 && (
     <div className="mb-3 flex flex-wrap gap-2">
       {selectedFiles.map((file, index) => (
         <div 
           key={index}
           className="bg-blue-50 border border-blue-200 rounded-lg px-3 py-1 flex items-center gap-2 text-sm text-blue-700"
         >
           <File className="w-4 h-4" />
           <span className="truncate max-w-[150px]">{file.name}</span>
           <button 
             onClick={() => handleRemoveFile(index)}
             className="text-blue-500 hover:text-blue-700"
             aria-label="Hapus file"
           >
             <XIcon className="w-4 h-4" />
           </button>
         </div>
       ))}
     </div>
   )}
   
   {/* Progress Bar UI */}
   {showProgress && (
     <div className="bg-white border border-gray-200 rounded-xl p-4 mb-4 shadow-sm">
       <ProgressBar 
         percent={progress.percent} 
         status={progress.status}
       />
       <p className="text-xs text-gray-500 italic">
         {progress.status === 'uploading' 
           ? 'Mengunggah file besar memerlukan waktu, mohon jangan refresh halaman.' 
           : progress.status === 'processing'
           ? 'AI sedang menganalisis dokumen, proses ini mungkin memerlukan beberapa menit untuk file besar.'
           : 'Sedang memproses...'}
       </p>
     </div>
   )}
   ```

5. Integrasi dengan Progress API:
   ```typescript
   // Setup progress listener
   useEffect(() => {
     const unsubscribe = onProgress((progressInfo) => {
       setProgress({
         status: progressInfo.status,
         percent: progressInfo.percent || 0
       });
       
       if (progressInfo.status === 'completed') {
         // Hide progress after completion + delay
         setTimeout(() => {
           setShowProgress(false);
         }, 1000);
       } else {
         setShowProgress(true);
       }
     });
     
     return () => {
       unsubscribe();
     };
   }, []);
   ```

6. File Size Checking:
   ```typescript
   // Check if any file is large (> 5MB)
   const hasLargeFile = selectedFiles.some(file => file.size > 5 * 1024 * 1024);
   if (hasLargeFile) {
     setShowProgress(true);
   }
   
   // Log file sizes sebelum upload
   if (selectedFiles.length > 0) {
     console.log('Uploading files:');
     selectedFiles.forEach((file, index) => {
       console.log(`File ${index + 1}: ${file.name} - ${(file.size / 1024 / 1024).toFixed(2)}MB`);
     });
   }
   ```

7. Error Handling untuk Upload File:
   ```typescript
   // Fungsi untuk menampilkan error yang lebih spesifik
   const getErrorMessage = (error: any): string => {
     if (!navigator.onLine) {
       return 'Perangkat Anda sedang offline. Silakan periksa koneksi internet dan coba lagi.';
     }
     
     if (error.message) {
       // Jika error spesifik tentang ukuran file
       if (error.message.includes('File terlalu besar')) {
         return 'File terlalu besar. Harap gunakan file dengan ukuran lebih kecil (maksimal 50MB).';
       }
       
       // Jika error timeout
       if (error.message.includes('timeout') || error.message.includes('timed out')) {
         return 'Permintaan timeout. File mungkin terlalu besar atau koneksi terlalu lambat.';
       }
       
       // Jika error spesifik tentang rate limit
       if (error.message.includes('Terlalu banyak permintaan')) {
         return 'Terlalu banyak permintaan dalam waktu singkat. Silakan tunggu beberapa saat dan coba lagi.';
       }
       
       // Jika ada pesan error spesifik lainnya, tampilkan
       return error.message;
     }
     
     // Default error message
     return 'Permintaan Terlalu banyak, coba lagi dalam 2 menit. (dengan bertumbuhnya pengguna, saat ini kami membatasi permintaan untuk menjaga kualitas layanan)';
   };
   ```

8. Best Practices untuk File Upload:
   - Gunakan accept attribute untuk membatasi jenis file yang dapat diunggah
   - Tampilkan progress bar khususnya untuk file besar
   - Berikan feedback visual untuk status upload (warna berbeda untuk status berbeda)
   - Tampilkan pesan informatif selama proses upload
   - Implementasikan mekanisme untuk menghapus file sebelum upload
   - Truncate nama file yang terlalu panjang dengan class `truncate max-w-[150px]`
   - Log ukuran file untuk debugging
   - Nonaktifkan tombol upload selama proses upload
   - Berikan pesan error yang spesifik untuk masalah umum (file terlalu besar, timeout, offline)
   - Reset selectedFiles setelah upload berhasil

9. Integrasi dengan Form Submission:
   ```typescript
   // Tetap memungkinkan submit jika ada file yang dipilih, bahkan jika inputMessage kosong
   if ((selectedFiles.length === 0 && !inputMessage.trim()) || isProcessing) return;
   
   // Jika pesan kosong tapi ada file, tampilkan pesan default
   content: inputMessage.trim() || (selectedFiles.length > 0 ? "Tolong analisis file yang saya kirimkan." : ""),
   
   // Kirim pesan dengan file jika ada
   const response = await sendChatMessage(
     userMessage.content, 
     selectedFiles.length > 0 ? selectedFiles : undefined
   );
   
   // Reset selected files setelah berhasil mengirim
   setSelectedFiles([]);
   setShowProgress(false);
   ```

# Scratchpad

[X] Task: Menerapkan Welcome Message Baru di Multiple Chat Pages
[X] Task: Membuat Agen Narkotika AI baru
[X] Task: Meningkatkan UX Textarea Input Mobile
[X] Task: Mendokumentasikan perubahan di .cursorrules
[X] Task: Perbaikan textarea input pada mobile devices di SiberChatPage.tsx
[X] Task: Memisahkan konfigurasi markdown formatter dari SiberChatPage.tsx
[X] Task: Refactoring SiberChatPage.tsx dengan modular components
[X] Task: Implementasi File Attachments Visualization di SiberChatPage.tsx
[X] Task: Migrasi agentSentimentAnalyst.ts ke Gemini Gen AI API - COMPLETED ✅
[X] Task: Migrasi agentModusKejahatan.ts ke Gemini Gen AI API - COMPLETED ✅
[X] Task: Migrasi agentCrimeTrendAnalyst.ts ke Gemini Gen AI API - COMPLETED ✅
[X] Task: Implementasi Modular Analysis Canvas untuk Crime Trend Analysis - COMPLETED ✅
[X] Task: Enhancement Temporal Analysis untuk Crime Trend Analyst - COMPLETED ✅
[X] Task: Enhancement Temporal Analysis untuk Sentiment Analyst - COMPLETED ✅
[X] Task: Migrasi agentSpkt.ts ke Gemini Gen AI API - COMPLETED ✅
[X] Task: Migrasi imageService.ts ke Gemini Gen AI API - COMPLETED ✅
[X] Task: Cleanup TypeScript warnings untuk unused imports - COMPLETED ✅
[X] Task: Membuat Agen Ensiklopedia Kepolisian Baru di Agents.tsx
[X] Task: Membuat Agen Laporan Intelejen Baru di Agents.tsx
[X] Task: Implementasi Service Laporan Intelejen dengan Gemini API - COMPLETED ✅
[X] Task: Membuat Custom Form dan Result Display untuk Laporan Intelejen - COMPLETED ✅
[X] Task: Fix Form Submission dan Clean TypeScript Warnings - COMPLETED ✅
[X] Task: Enhancement Structured Parsing untuk Intelligence Analysis - COMPLETED ✅
[X] Task: Perbaikan Structured Parsing Function untuk Format Output Actual - COMPLETED ✅
[X] Task: Perbaikan Responsivitas Mobile dan Struktur Angka Romawi di IntelligenceResultDisplay - COMPLETED ✅
[X] Task: Cleanup TypeScript Warnings di agentLaporanIntelejen.ts - COMPLETED ✅
[X] Task: Perbaikan Nama dan Deskripsi Agent Intelkam AI - COMPLETED ✅
[X] Task: Implementasi Fungsi Waktu Terkini untuk Pencarian Spesifik - COMPLETED ✅
[X] Task: Konfigurasi Link Referensi untuk Dibuka di Tab Baru - COMPLETED ✅
[X] Task: Menghilangkan Duplikasi Header Form Intelkam AI - COMPLETED ✅
[X] Task: Cleanup TypeScript Warnings di IntelligenceAgentForm.tsx - COMPLETED ✅

## Task: Membuat Agen Laporan Intelejen Baru

### Deskripsi:
Membuat agen AI "Laporan Intelejen" yang membantu menganalisis dan menyusun laporan intelijen kepolisian untuk mendukung operasi keamanan.

### Langkah-langkah yang Diselesaikan:
[X] 1. Buat konfigurasi agen di src/data/agents/laporanInteljenAgent.ts
[X] 2. Update types di src/types/index.ts (menambahkan 'laporan_intelejen')
[X] 3. Update utils di src/utils/utils.ts (AGENT_IDS dan getAgentTypeFromId)
[X] 4. Update AgentCard di src/components/AgentCard.tsx (menambahkan icon Eye)
[X] 5. Update Agents.tsx untuk menambahkan agen baru
[X] 6. Buat placeholder service file di src/services/agentLaporanIntelejen.ts
[X] 7. Update useAgentForm hook untuk integrasi service
[X] 8. Implementasi service dengan Gemini API - COMPLETED ✅
[X] 9. Membuat Custom Form dan Result Display untuk Laporan Intelejen - COMPLETED ✅
[X] 10. Fix Form Submission Issue - Form tidak lagi reload dan berjalan dengan benar

### Spesifikasi Agen:
- **Nama**: "Laporan Intelejen"
- **Type**: "laporan_intelejen"
- **ID**: "laporan_intelejen_001"
- **Icon**: Eye (surveillance/intelligence)
- **Color**: indigo-600 (professional intelligence theme)
- **Deskripsi**: "Asisten AI yang membantu menganalisis dan menyusun laporan intelijen kepolisian untuk mendukung operasi keamanan"
- **Form Type**: Custom IntelligenceAgentForm dengan multiple fields dan conditional logic

### Technical Implementation:
- **Agent Configuration**: Menggunakan ExtendedAgent interface dengan icon Eye dari lucide-react
- **Custom Form Integration**: IntelligenceAgentForm dengan state internal dan submit handler sendiri
- **Service Pattern**: Direct service integration tanpa melalui useAgentForm untuk menghindari konflik
- **Type Safety**: Semua TypeScript types sudah ditambahkan dan terintegrasi
- **UI Integration**: Icon dan styling konsisten dengan tema intelligence/surveillance

### Status:
✅ **IMPLEMENTASI LENGKAP** - Semua aspek sudah selesai dan berfungsi dengan baik.

### Implementasi Service - COMPLETED ✅:
- **Gemini API Integration**: Menggunakan gemini-2.0-flash dengan web search tools
- **Dual Function Service**: 
  * `generateIntelligenceReport()` - Membuat laporan intelijen lengkap 
  * `searchIntelligenceProductsByArea()` - Mencari produk intelijen di wilayah hukum
- **Complex Form Support**: Update agent configuration untuk mendukung 9 fields termasuk dropdown mode
- **Advanced Form Handling**: Custom form dengan state internal, tidak menggunakan useAgentForm
- **Professional Report Format**: Format laporan sesuai standar intelijen kepolisian Indonesia
- **Web Search Integration**: Real-time web search untuk informasi terkini
- **Error Handling**: Comprehensive error handling dengan specific messages
- **Session Management**: User tracking dengan Supabase integration
- **Data Validation**: Conditional validation berdasarkan mode (REPORT vs SEARCH)
- **Intelligence Terminology**: Menggunakan terminologi intelijen kepolisian yang tepat (Pulbaket, Pamtup, dll)

### Custom Form Architecture - COMPLETED ✅:
- **IntelligenceAgentForm**: Self-contained form dengan state dan submit handler internal
- **IntelligenceResultDisplay**: Professional display component untuk hasil dengan metadata
- **Removed from useAgentForm**: Logika laporan intelejen dihapus dari useAgentForm untuk menghindari konflik
- **Direct Service Integration**: Form langsung memanggil submitLaporanInteljenAnalysis service
- **Form Layout**: Conditional layout di Agents.tsx untuk laporan intelejen tanpa wrapper form
- **Error Handling**: Internal error state dan callback ke parent component
- **Validation**: Real-time validation dengan visual feedback untuk user

### Form Submission Fix - COMPLETED ✅:
- **Fixed Form Reload Issue**: Form kini berfungsi tanpa reload halaman
- **Clean TypeScript Warnings**: Menghapus imports yang tidak digunakan (CheckCircle, FormDataValue, MapPin)
- **Removed Unused State**: Menghapus localError state yang tidak digunakan untuk rendering
- **Error Handling Optimization**: Langsung menggunakan onError callback tanpa internal state
- **Direct Service Call**: Form langsung memanggil submitLaporanInteljenAnalysis tanpa melalui useAgentForm
- **Conditional Layout**: Layout yang berbeda untuk laporan intelejen (tanpa wrapper form) vs agen lain
- **Professional Result Display**: Full-screen modal untuk hasil dengan metadata, copy, print, download functionality
- **Code Formatting**: Memperbaiki struktur dan formatting kode untuk readability
- **JSX Structure Fix**: Memperbaiki missing closing tags dan struktur JSX yang tidak lengkap

## Complex Agent Implementation Pattern

Untuk agen dengan multiple fields dan conditional logic seperti Laporan Intelejen:

1. **Agent Configuration**:
   - Gunakan multiple fields dengan different types (select, text, textarea)
   - Implementasikan conditional fields berdasarkan mode
   - Tambahkan dropdown options dengan descriptive labels
   - Set required/optional fields sesuai business logic

2. **Service Implementation Pattern**:
   ```typescript
   // Dual function pattern dengan mode detection
   export const submitAgentAnalysis = async (message: string): Promise<string> => {
     // Parse MODE:type\nDATA:{json} format
     let mode = 'DEFAULT';
     let data: any = {};
     
     if (message.includes('MODE:')) {
       // Extract mode and data from structured message
     }
     
     if (mode === 'SPECIAL_MODE') {
       return await specialFunction(data);
     } else {
       return await defaultFunction(data);
     }
   };
   ```

3. **Form Handler Pattern**:
   ```typescript
   case 'complex_agent':
     // Extract all form fields
     const field1 = formData.field1 as string || '';
     const field2 = formData.field2 as string || '';
     
     // Conditional validation based on mode
     if (mode === 'MODE_A') {
       if (!field1.trim()) throw new Error('Field1 required for Mode A');
     }
     
     // Structure data for service
     const agentData = { mode, field1, field2, ... };
     const structuredMessage = `MODE:${mode}\nDATA:${JSON.stringify(agentData)}`;
     response = await submitAgentAnalysis(structuredMessage);
   ```

4. **Professional Intelligence Report Structure**:
   ```
   I. PENDAHULUAN
   II. FAKTA-FAKTA  
   III. PENDAPAT PELAPOR
      I. ANALISA
      II. PREDIKSI
      III. LANGKAH-LANGKAH INTELIJEN
      IV. REKOMENDASI
   ```

5. **Intelligence Data Classification**:
   - A1-A3: Sumber dapat dipercaya
   - B1-B3: Sumber agak dapat dipercaya  
   - C1-C3: Sumber tidak dapat dipercaya
   - D, E, F: Special classifications

## Migrasi agentSentimentAnalyst.ts ke Gemini Gen AI API - Completed ✅

### Hasil Migrasi:
1. **API Migration**: Berhasil migrasi dari backend custom ke Gemini Gen AI API
2. **Package Installation**: 
   - Installed `@google/genai` package
   - Installed `recharts` package untuk visualisasi data
   - Updated import statements to use GoogleGenAI, GenerateContentResponse, Part, GroundingChunk types
3. **TypeScript Fixes**:
   - Fixed type conflicts by using official GroundingChunk type from @google/genai package
   - Removed custom interface definitions that conflicted with package types
   - Proper type checking for undefined values in grounding metadata
   - **Fixed unused variable warnings**: Replaced `(entry, index)` dengan `(_, index)` di SentimentChart.tsx untuk menghilangkan TypeScript warning tentang unused variables
   - **Fixed chart tooltip undefined issue**: Improved CustomTooltip untuk menangani PieChart dan BarChart payload formats dengan benar, mencegah tampilan "undefined" saat hover
4. **New Features Implemented**:
   - **Google Search Integration**: Menggunakan `tools: [{ googleSearch: {} }]` untuk riset web otomatis
   - **Structured Response Parsing**: Implementasi parsing dengan format [ANALYSIS_START]...[ANALYSIS_END]
   - **Web Sources Extraction**: Mengambil sumber referensi dari grounding metadata
   - **Bilingual Support**: Prompt dan respons dalam bahasa Indonesia
   - **Percentage-based Results**: Format hasil dengan distribusi sentimen persentase

5. **Custom UI Canvas Implementation**:
   - **SentimentAnalysisCanvas**: Full-screen modal canvas untuk visualisasi hasil
   - **SentimentChart**: Bar chart dan pie chart dengan recharts untuk distribusi sentimen
   - **SentimentDisplay**: Tabbed interface untuk menampilkan analisis, sumber, dan query pencarian
   - **Light Theme UI**: Mengubah dari dark theme (slate) ke light theme (white/gray) untuk konsistensi dengan aplikasi
   - **Interactive Elements**: Toggle chart type, copy functionality, dan tabbed navigation
   - **Responsive Design**: Layout yang responsif untuk desktop dan mobile
   - **Real-time Parsing**: Automatic parsing dari format output Gemini ke struktur data terorganisir
   - **Sidebar Integration**: Canvas margin adjustment untuk sinkronisasi dengan sidebar (lg:left-72)
   - **Flexible Canvas Size**: Menggunakan calc(100vh - 8rem) untuk tinggi konten yang fleksibel dan scrollable
   - **Responsive Layout**: Menggunakan flex-col lg:flex-row untuk layout mobile-first yang adaptif

6. **UI/UX Improvements**:
   - **Color Scheme**: Mengubah dari slate-800/slate-700 ke white/gray-50 untuk background
   - **Text Colors**: Mengubah dari slate-200/slate-300 ke gray-800/gray-700 untuk readability
   - **Button Styling**: Menggunakan gray-200 background dengan hover states yang sesuai
   - **Chart Colors**: Mempertahankan warna chart yang vibrant (emerald, red, amber) untuk kontras yang baik
   - **Border Colors**: Menggunakan gray-200/gray-300 untuk borders yang subtle
   - **Canvas Positioning**: Fixed positioning dengan margin untuk sidebar (lg:left-72) agar tidak bertabrakan dengan navigasi
   - **Desktop & Mobile Optimization**: 
     * **Mobile**: Margin yang lebih kecil (inset-2), touch-friendly buttons, compact layout, reduced padding
     * **Desktop**: Margin yang lebih besar (lg:p-8), larger icons (lg:w-6 lg:h-6), bigger text (lg:text-2xl)
     * **Responsive Text**: text-sm sm:text-base lg:text-lg untuk berbagai screen sizes
     * **Responsive Icons**: w-4 h-4 sm:w-5 sm:h-5 lg:w-6 lg:h-6 untuk scaling yang baik
     * **Responsive Padding**: p-3 sm:p-4 lg:p-8 untuk space yang sesuai per device
     * **Chart Sizing**: Height responsive (h-64 sm:h-80 lg:h-96) dan bar size yang adaptive
     * **Button Sizing**: Touch-safe mobile (min-w-[40px]) dan desktop-friendly (lg:min-w-[52px])
     * **Gap Spacing**: gap-2 sm:gap-3 lg:gap-4 untuk spacing yang konsisten di semua device
     * **Responsive Charts**: OuterRadius dan barSize yang menyesuaikan dengan screen width
     * **Typography Scaling**: Font sizes yang sesuai dari mobile ke desktop (12px → 14px → 16px)
     * **Layout Flexibility**: flex-col di mobile, lg:flex-row di desktop untuk optimal space usage
     * **Component Heights**: min-h yang progresif (250px → 300px → 400px) untuk better content fitting

7. **Environment Variables**: 
   - Menambahkan requirement untuk `VITE_GEMINI_API_KEY`
   - Improved error handling untuk API key validation
   - User should configure API key in .env file

8. **Enhanced Error Handling**:
   - Specific error messages untuk API key, quota, dan rate limit issues
   - Comprehensive logging untuk debugging
   - Graceful fallback untuk parsing errors

9. **Response Format Improvements**:
   - Structured output dengan summary, persentase sentimen, dan sumber referensi
   - Markdown formatting untuk better readability
   - Professional Indonesian language output

10. **Integration dengan Agents.tsx**:
    - Conditional rendering antara `SentimentAnalysisCanvas` untuk sentiment_analyst dan `ResultArtifact` untuk agent lain
    - Layout adjustment yang tidak mengubah margin untuk sentiment analyst (full screen modal)
    - Seamless integration dengan existing agent workflow

Professional Color Scheme Examples:
- Financial Services (P2SK): blue-indigo gradient (from-blue-50 to-indigo-50)
- Criminal Law (KUHP): rose-orange gradient (from-rose-50 to-orange-50)
- Technology Law (ITE): cyan-sky gradient (from-cyan-50 to-sky-50)
- Labor Law (Cipta Kerja): slate-gray gradient (from-slate-50 to-gray-50)

## Migrasi agentModusKejahatan.ts ke Gemini Gen AI API - Completed ✅

### Hasil Migrasi:
1. **API Migration**: Berhasil migrasi dari backend custom ke Gemini Gen AI API
2. **Crime Pattern Analysis**: Fokus pada analisis modus kejahatan dari unik hingga sering terjadi
3. **Package Integration**: 
   - Menggunakan `@google/genai` package yang sudah ter-install
   - Import GoogleGenAI, GenerateContentResponse, Part, GroundingChunk types
   - Menggunakan Supabase untuk user management
4. **Structured Response Parsing**: 
   - Implementasi parsing dengan format [ANALYSIS_START]...[ANALYSIS_END]
   - Kategorisasi kejahatan: UNIQUE_CRIMES, MODERATE_CRIMES, COMMON_CRIMES
   - Parsing list dengan bullet points untuk setiap kategori
5. **New Features Implemented**:
   - **Google Search Integration**: Menggunakan `tools: [{ googleSearch: {} }]` untuk riset data kriminalitas
   - **Crime Categorization**: Otomatis kategorisasi berdasarkan frekuensi kejadian
   - **Web Sources Extraction**: Mengambil sumber referensi dari laporan kepolisian dan institusi resmi
   - **Professional Analysis**: Prompt yang komprehensif dengan 6 bagian analisis
   - **Legal Context**: Terminologi hukum dan kriminologi yang akurat

6. **Prompt Structure**:
   - **Ringkasan Eksekutif**: Gambaran umum kategori kejahatan
   - **Analisis Pola dan Tren**: Metode, modus operandi, target, lokasi, waktu
   - **Profil Pelaku dan Korban**: Demografis, motivasi, karakteristik
   - **Dampak dan Konsekuensi**: Kerugian ekonomi, sosial, psikologis
   - **Upaya Pencegahan**: Strategi pencegahan, deteksi dini, penanganan
   - **Metodologi**: Sumber data dan metode analisis

7. **Enhanced Research Guidelines**:
   - Prioritas pada sumber resmi (Polri, BPS, KemenKumHAM)
   - Fokus pada data kriminalitas terkini dan studi kriminologi
   - Evaluasi pola, tren, dan karakteristik spesifik
   - Akurasi terminologi hukum dan objektifitas

8. **Environment Variables**: 
   - Menggunakan `VITE_GEMINI_API_KEY` yang sudah dikonfigurasi
   - Enhanced error handling untuk API key, quota, dan rate limit issues

9. **Output Format**:
   - Analisis komprehensif dengan struktur profesional
   - Kategorisasi kejahatan berdasarkan frekuensi (unik, sedang, sering)
   - Sumber referensi dengan links yang dapat diakses
   - Query pencarian yang digunakan untuk transparansi

10. **Integration Pattern**:
    - Mengikuti pattern yang sama dengan agentSentimentAnalyst.ts
    - Consistent error handling dan logging
    - User session management dengan Supabase
    - Response parsing yang robust dengan fallback

### Implementation Benefits:
- **Real-time Data**: Akses data kriminalitas terkini dari web
- **Authoritative Sources**: Prioritas pada sumber resmi dan institusi
- **Structured Analysis**: Output yang terorganisir dan profesional
- **Categorization**: Otomatis klasifikasi berdasarkan frekuensi kejadian
- **Transparency**: Sumber dan metode pencarian yang jelas
- **Legal Accuracy**: Terminologi hukum yang tepat dan objektif

## Migrasi agentCrimeTrendAnalyst.ts ke Gemini Gen AI API - Completed ✅

### Hasil Migrasi:
1. **API Migration**: Berhasil migrasi dari backend custom ke Gemini Gen AI API
2. **Crime Trend Analysis Focus**: Fokus pada analisis tren kejahatan Indonesia dan prediksi masa depan
3. **Package Integration**: 
   - Menggunakan `@google/genai` package yang sudah ter-install
   - Import GoogleGenAI, GenerateContentResponse, Part, GroundingChunk types
   - Menggunakan Supabase untuk user management
4. **Custom Output Format Implementation**: 
   - Implementasi parsing dengan format [ANALYSIS_START]...[ANALYSIS_END]
   - Output structure yang sangat spesifik sesuai permintaan user:
     * Ringkasan Eksekutif
     * Analisis Tren (Metrik Volume dengan periode puncak, tingkat pertumbuhan, sebaran wilayah)
     * Analisis Sumber (Sumber Utama dengan detail kejadian dan informasi tambahan)
     * Temuan Kunci (dengan Modus Operandi, Karakteristik, Rekomendasi)
     * Prediksi dan Pencegahan (prediksi tren, dasar analisis, langkah antisipasi)
     * Referensi lengkap dengan tautan
5. **Advanced Structured Parsing**:
   - **Complex Regex Patterns**: Parsing multi-level struktur data dengan named groups
   - **Type Safety**: Proper TypeScript typing dengan interface CrimeTrendResult
   - **Fallback Handling**: Default values untuk data yang tidak tersedia
   - **Error Handling**: Robust parsing dengan graceful degradation

6. **New Features Implemented**:
   - **Google Search Integration**: Menggunakan `tools: [{ googleSearch: {} }]` untuk riset trend data
   - **Trend Analysis**: Fokus pada analisis temporal, geografis, dan demografis
   - **Prediction Engine**: Prediksi masa depan berdasarkan data historis dan pattern analysis
   - **Statistical Focus**: Prioritas pada data kuantitatif dan metrik terukur
   - **Authoritative Sources**: Fokus pada Polri, BPS, KemenKumHAM, Kejaksaan

7. **Enhanced Research Guidelines**:
   - Prioritas pada data statistik kejahatan terkini dan laporan tahunan kepolisian
   - Fokus pada pola temporal, geografis, dan demografis kejahatan
   - Cari data komparatif periode sebelumnya untuk analisis trend
   - Evaluasi tren naik/turun, cyclical patterns, dan faktor penyebab
   - Prediksi berdasarkan data historis dan pattern recognition

8. **Structured Output Template**:
   ```markdown
   # Laporan Analisis Tren Kejahatan
   
   ## Ringkasan Eksekutif
   {Gambaran umum temuan dan metrik utama}
   
   ## Analisis Tren
   ### Metrik Volume
   - Periode puncak kejadian: {data}
   - Tingkat pertumbuhan: {persentase/trend}
   - Sebaran wilayah: {daerah hukum}
   
   ## Analisis Sumber
   ### Sumber Utama
   1. {Sumber 1}
      - Detail kejadian: {ekstraksi}
      - Informasi tambahan: {analisis}
   
   ## Temuan Kunci
   1. {Temuan 1}
      - Modus Operandi: {pola}
      - Karakteristik: {ciri khas}
      - Rekomendasi: {tindakan}
   
   ## Prediksi dan Pencegahan
   1. {Prediksi tren}
      - Dasar analisis: {bukti dan data}
      - Langkah antisipasi: {strategi}
   
   ## Referensi
   {Daftar sumber dengan tautan}
   ```

9. **TypeScript Implementation Details**:
   - **Complex Interface Design**: Multi-level nested interfaces untuk structured data
   - **Regex with Named Groups**: Advanced parsing dengan capture groups
   - **Type Casting**: Safe type conversion dengan fallback values
   - **Error Boundary**: Comprehensive error handling untuk parsing failures

10. **Integration Pattern**:
    - Mengikuti pattern yang sama dengan agents lain untuk consistency
    - Enhanced error handling untuk API key, quota, dan rate limit issues
    - User session management dengan Supabase
    - Response parsing yang robust dengan extensive fallback logic

### Implementation Benefits:
- **Real-time Trend Data**: Akses data tren kejahatan terkini dari web Indonesia
- **Predictive Analysis**: Kemampuan prediksi masa depan berdasarkan historical patterns
- **Statistical Accuracy**: Prioritas pada data kuantitatif dan metrik terukur
- **Structured Output**: Format laporan yang sangat terorganisir dan profesional
- **Authority Focus**: Sumber resmi dan institusi terpercaya
- **Comprehensive Analysis**: 6 section analysis dengan detail mendalam
- **Transparency**: Query pencarian dan sumber yang jelas untuk verifikasi

### Technical Achievements:
- **Advanced Parsing**: Complex multi-pattern regex parsing dengan named groups
- **Type Safety**: Complete TypeScript coverage dengan proper interfaces
- **Error Resilience**: Robust fallback mechanisms untuk missing data
- **Professional Output**: Template-based formatting sesuai spesifikasi user
- **Real-time Research**: Live web search integration dengan authoritative sources

## Migrasi agentSpkt.ts ke Gemini Gen AI API - Completed ✅

### Hasil Migrasi:
1. **API Migration**: Berhasil migrasi dari backend custom package `@google/generative-ai` ke package baru `@google/genai`
2. **Error Fix**: Menyelesaikan error "Failed to parse stream" yang disebabkan oleh incompatibility antara old dan new API
3. **Package Integration**: 
   - Menggunakan `@google/genai` package yang sudah ter-install
   - Import GoogleGenAI, GenerateContentResponse, Part, GroundingChunk types
   - Menggunakan Supabase untuk user management
   - Import uuid untuk session management
4. **API Syntax Migration**: 
   - **Old API**: `new GoogleGenerativeAI(env.geminiApiKey)` → **New API**: `new GoogleGenAI({ apiKey: API_KEY })`
   - **Old API**: `model.generateContentStream()` → **New API**: `ai.models.generateContent()`
   - **Old API**: HarmCategory/HarmBlockThreshold enums → **New API**: Simplified string-based config
   - **Old API**: Complex safety settings → **New API**: Basic config tanpa safety settings
   - **Old API**: Stream processing → **New API**: Direct response.text access
5. **Configuration Updates**:
   - **Environment Variable**: Menggunakan `import.meta.env.VITE_GEMINI_API_KEY` sesuai pattern agent lain
   - **Error Handling**: Enhanced error handling dengan API key validation
   - **Logging**: Improved logging dengan user_id dan session_id tracking
   - **Response Format**: Direct text response tanpa streaming complexity
6. **Enhanced Error Handling**:
   - **API Key Issues**: Specific error messages untuk API_KEY_INVALID
   - **Rate Limiting**: Enhanced rate limit dan quota exceeded handling
   - **Forbidden Access**: Clearer error messages untuk access issues
   - **Generic Errors**: Better error propagation dengan original message context
7. **Functionality Preservation**:
   - **System Prompt**: Mempertahankan sistem prompt yang sudah ada untuk Reserse AI
   - **Analysis Structure**: Tetap menggunakan format analisis kronologi yang sama
   - **Output Format**: Konsisten dengan format laporan yang sudah established
   - **Temperature & TopP**: Mempertahankan parameter generasi yang sama (1.0 dan 0.95)
8. **User Session Management**:
   - **getCurrentUserId()**: Function untuk mendapatkan user ID dari Supabase auth
   - **getSessionId()**: Function untuk mendapatkan session ID untuk tracking
   - **Logging Enhancement**: User dan session tracking untuk debugging
9. **Code Cleanup**:
   - **Removed Old Imports**: Menghapus import dari `@google/generative-ai` dan `env`
   - **Simplified Configuration**: Tidak ada safety settings yang complex
   - **TypeScript Fixes**: Fixed type errors dengan string-based configuration
   - **Stream Removal**: Menghapus streaming logic yang menyebabkan parsing error

### Technical Achievements:
- **API Compatibility**: Successful migration to modern @google/genai API
- **Error Resolution**: Fixed "Failed to parse stream" error completely
- **Consistency**: Aligned dengan pattern migrasi yang sudah berhasil di agent lain
- **Enhanced Reliability**: Improved error handling dan user session tracking
- **Professional Output**: Maintained quality dan format output yang professional
- **Future-Proof**: Using latest API specification sesuai dokumentasi resmi

### Implementation Benefits:
- **Stability**: No more stream parsing errors yang mengganggu user experience
- **Consistency**: Same API pattern dengan all other agents untuk maintenance
- **Enhanced Debugging**: Better logging dan error reporting untuk development
- **Professional Integration**: Seamless integration dengan Supabase auth system
- **Error Transparency**: Clear error messages untuk different failure scenarios
- **Scalability**: Ready untuk additional features dengan modern API foundation

### Migration Pattern for Future Agents:
```typescript
// 1. Import pattern baru
import { GoogleGenAI, GenerateContentResponse, Part, GroundingChunk } from "@google/genai";
import { supabase } from '@/supabaseClient';
import { v4 as uuidv4 } from 'uuid';

// 2. API key configuration
const API_KEY = import.meta.env.VITE_GEMINI_API_KEY;
const ai = new GoogleGenAI({ apiKey: API_KEY! });

// 3. User session functions
const getCurrentUserId = async (): Promise<string> => {
  const { data: { user } } = await supabase.auth.getUser();
  return user?.id || uuidv4();
};

// 4. API call pattern
const response = await ai.models.generateContent({
  model: "gemini-2.0-flash",
  contents: prompt,
  config: {
    maxOutputTokens: 8192,
    temperature: 1.0,
    topP: 0.95,
  },
});

// 5. Enhanced error handling dengan specific cases
if (error.message.includes('API_KEY_INVALID')) {
  throw new Error('API key Gemini tidak valid...');
}
```

### Environment Requirements:
- **VITE_GEMINI_API_KEY**: Required di .env file untuk Gemini API access
- **Supabase Configuration**: Must be properly configured untuk user session management
- **Package Dependencies**: @google/genai package harus ter-install di package.json

## Migrasi imageService.ts ke Gemini Gen AI API - Completed ✅

### Hasil Migrasi:
1. **API Migration**: Berhasil migrasi dari package lama `@google/generative-ai` ke package baru `@google/genai`
2. **Image Analysis Focus**: Khusus untuk analisis gambar dengan multimodal capabilities
3. **Package Integration**: 
   - Menggunakan `@google/genai` package yang sudah ter-install
   - Import GoogleGenAI, GenerateContentResponse, Part, GroundingChunk types
   - Menggunakan Supabase untuk user management
   - Import uuid untuk session management
4. **API Syntax Migration**: 
   - **Old API**: `new GoogleGenerativeAI(GEMINI_API_KEY)` → **New API**: `new GoogleGenAI({ apiKey: API_KEY })`
   - **Old API**: `models.primary.generateContent(parts)` → **New API**: `ai.models.generateContent({ model, contents, config })`
   - **Old API**: `result.response.text()` → **New API**: `response.text` direct access
   - **Old API**: Model instances → **New API**: Model names as strings
5. **Enhanced Image Processing**:
   - **File Metadata Logging**: Log ukuran file dalam MB untuk debugging
   - **Base64 Processing**: Maintain existing base64 conversion dengan improved error handling
   - **Multimodal Content**: Proper Part[] typing untuk text dan image content
   - **MIME Type Handling**: Consistent MIME type processing dari file.type
6. **Improved Error Handling**:
   - **API Key Issues**: Specific error messages untuk API_KEY_INVALID (401 errors)
   - **Quota Management**: Enhanced quota exceeded dan rate limit handling
   - **Model Fallback**: Improved fallback logic dengan logging untuk transparency
   - **File Processing Errors**: Better handling untuk image conversion failures
   - **Network Issues**: Enhanced network error detection dan messaging
7. **User Session Management**:
   - **getCurrentUserId()**: Function untuk mendapatkan user ID dari Supabase auth
   - **getSessionId()**: Function untuk mendapatkan session ID untuk tracking
   - **Enhanced Logging**: User, session, dan file metadata tracking untuk debugging
   - **File Tracking**: Log nama file dan ukuran untuk better monitoring
8. **Configuration Improvements**:
   - **Model Selection**: Dynamic model switching antara gemini-2.0-flash dan gemini-2.0-flash-exp
   - **Content Structure**: Proper contents array dengan role specification
   - **Generation Config**: Maintain existing temperature (1.0) dan topP (0.95) settings
   - **Token Limits**: Set maxOutputTokens to 8192 untuk image analysis results
9. **Retry Logic Enhancement**:
   - **Fallback Model**: Automatic switch ke model exp saat primary model overloaded
   - **Progressive Delays**: Maintained existing progressive retry delays
   - **Status Logging**: Clear logging untuk retry attempts dan model switching
   - **Error Classification**: Better error classification untuk appropriate handling

### Technical Achievements:
- **Multimodal Compatibility**: Successful migration untuk image analysis dengan new API
- **File Processing Stability**: Maintained existing base64 conversion dan file handling
- **Error Resilience**: Enhanced error handling untuk various failure scenarios
- **Performance Monitoring**: Improved logging untuk performance tracking dan debugging
- **Model Reliability**: Robust fallback system untuk high availability
- **API Consistency**: Aligned dengan pattern yang sudah berhasil di text-based agents

### Implementation Benefits:
- **Modern API**: Using latest @google/genai API specification untuk future compatibility
- **Enhanced Debugging**: Comprehensive logging untuk development dan production monitoring
- **Improved Reliability**: Better error handling dan recovery mechanisms
- **Session Tracking**: Professional integration dengan Supabase auth system
- **File Monitoring**: Better visibility into file processing untuk optimization
- **Consistent Pattern**: Same migration pattern dengan all other services

### Image-Specific Features Preserved:
- **Multi-File Support**: Maintained ability untuk process multiple images dalam single call
- **Prompt Customization**: Preserved imagePrompts integration dengan flexible prompt types
- **Format Validation**: Continued validation untuk supported image formats
- **Context Enhancement**: Maintained description parameter untuk additional context
- **Result Formatting**: Preserved multi-file result concatenation dengan clear separators

### Enhanced Web Search Integration:
- **Google Search Tools**: Menambahkan `tools: [{ googleSearch: {} }]` untuk konteks web yang lebih kaya
- **Enhanced Prompt Engineering**: createEnhancedImagePrompt() function untuk prompt yang memanfaatkan web search
- **Clean Output Processing**: Automatic removal dari URLs dan referensi web untuk clean user experience
- **Grounding Metadata Handling**: Process grounding metadata tanpa expose ke user
- **Search Query Logging**: Log web search queries untuk debugging tanpa tampil di output
- **Context-Rich Analysis**: Kombinasi visual analysis dengan real-time web knowledge
- **Professional Output**: Clean, professional response tanpa referensi link eksplisit

### Web Search Error Handling:
- **Search Service Fallback**: Graceful degradation saat web search tidak tersedia
- **Enhanced Error Messages**: Specific error handling untuk grounding dan search issues
- **Reference Cleanup**: Automatic cleanup untuk URLs, markdown links, dan source references
- **Consistent Experience**: Maintain user experience consistency tanpa expose technical details

## Task: Membuat Agen Ensiklopedia Kepolisian Baru

### Deskripsi:
Membuat agen AI "Ensiklopedia Kepolisian" yang menyediakan informasi komprehensif tentang terminologi, prosedur, dan pengetahuan kepolisian Indonesia.

### Langkah-langkah:
[X] 1. Buat konfigurasi agen di src/data/agents/encyclopediaPoliceAgent.ts
[X] 2. Update types di src/types/index.ts (menambahkan 'encyclopedia_police')
[X] 3. Update utils di src/utils/utils.ts
[X] 4. Update AgentCard di src/components/AgentCard.tsx (menambahkan icon BookOpen)
[X] 5. Update Agents.tsx untuk menambahkan agen baru
[X] 6. Buat placeholder service file di src/services/agentEncyclopediaPolice.ts
[X] 7. Update useAgentForm hook untuk integrasi service
[X] 8. Implementasi service dengan Gemini API + Wikipedia Indonesia API
[ ] 9. Testing dan verifikasi

### Spesifikasi Agen:
- **Nama**: "Ensiklopedia Kepolisian"
- **Type**: "encyclopedia_police"
- **ID**: "encyclopedia_police_001"
- **Icon**: BookOpen (ensiklopedia/buku)
- **Deskripsi**: "Asisten AI yang menyediakan informasi komprehensif tentang terminologi, prosedur, dan pengetahuan kepolisian Indonesia"
- **Form Type**: BaseAgentForm (textarea standar)

### Implementasi Service - COMPLETED ✅:
- **Gemini API Integration**: Menggunakan gemini-2.0-flash dengan web search tools
- **Wikipedia Indonesia API**: Fetch data ensiklopedia dari id.wikipedia.org
- **Enhanced Wikipedia Search**: Fallback search dengan alternatif kata kunci untuk singkatan kepolisian
- **Dual Source Analysis**: Menggabungkan informasi dari web search dan Wikipedia
- **Structured Output**: Format markdown dengan heading dan sumber referensi
- **Error Handling**: Comprehensive error handling dengan retry logic
- **Session Management**: User tracking dengan Supabase integration
- **Professional Context**: Fokus pada konteks kepolisian Indonesia
- **User Feedback Applied**: 
  * Informasi ensiklopedia yang komprehensif dan lengkap (tidak diminimalkan)
  * Prompt difokuskan sebagai ensiklopedia yang memberikan informasi mendalam
  * Tambahan berita terbaru dengan grounding web terkait kata kunci
  * Temperature tinggi (0.7) untuk respon ensiklopedia yang komprehensif
  * Wikipedia data + Informasi ensiklopedia lengkap + Berita terbaru dari web search
  * Format: Data Wikipedia → Informasi Ensiklopedia Lengkap → Sumber Referensi & Berita Terbaru
  * **BAHASA INDONESIA ONLY**: Prompt secara eksplisit menekankan penggunaan bahasa Indonesia saja
  * **Wikipedia Fallback Search**: Automatic alternative search untuk singkatan kepolisian (polda→Kepolisian Daerah, dll)

### Enhancement Structured Parsing untuk Intelligence Analysis - COMPLETED ✅:
- **Structured Response Parsing**: Implementasi parseIntelligenceResponse() function untuk parsing output Gemini yang lebih terstruktur
- **IntelligenceAnalysisResult Interface**: Interface lengkap untuk hasil analisis dengan metadata, intelligence issues, dan web sources
- **Enhanced Metadata Extraction**: 
  * Extract wilayah hukum, kategori, tanggal pencarian dari header
  * Parse intelligence issues dengan title, summary, potential investigation, dan sources
  * Extract executive summary berdasarkan mode (REPORT vs SEARCH)
- **Intelligence Issues Parsing**: 
  * Pattern matching untuk numbered issues (### 1., ### 2., etc)
  * Extract JUDUL ISU, RINGKASAN ISU, POTENSI AWAL PENYELIDIKAN, SUMBER
  * Parse bullet points untuk potential investigation
  * Extract URLs dari sumber informasi
- **Enhanced Logging**: 
  * Raw Gemini response logging untuk debugging
  * Structured logging dengan issuesFound, sourcesFound, queriesUsed counts
  * Performance monitoring untuk parsing success
- **Improved Output Formatting**:
  * Enhanced header dengan kategori dan pokok permasalahan
  * Better source formatting dengan domain extraction
  * Metadata-rich footer dengan detailed statistics
  * Query pencarian tracking dan display
- **getStructuredIntelligenceAnalysis Function**: 
  * Export function untuk structured analysis results
  * Support untuk both REPORT dan SEARCH modes
  * Consistent dengan pattern di agentCrimeTrendAnalyst.ts
  * Return structured data untuk potential canvas component integration
- **Error Handling Enhancement**:
  * Graceful fallback untuk parsing failures
  * Comprehensive error logging untuk debugging
  * Maintain functionality dengan atau tanpa structured parsing
- **Type Safety Improvements**:
  * Complete TypeScript coverage dengan IntelligenceAnalysisResult interface
  * Proper typing untuk web sources dan search queries arrays
  * Export semua types untuk reusability

### Structured Parsing Pattern untuk Intelligence Agents:
```typescript
// 1. Define structured result interface
interface IntelligenceAnalysisResult {
  analysis: string;
  executiveSummary: string;
  reportMetadata: {
    wilayahHukum: string;
    kategori: string;
    tanggalPencarian: string;
    mode: 'REPORT' | 'SEARCH';
  };
  intelligenceIssues: Array<{
    title: string;
    summary: string;
    potentialInvestigation: string[];
    sources: string[];
  }>;
  searchQueries: string[];
  webSources: WebSource[];
}

// 2. Implement parsing function
function parseIntelligenceResponse(responseText: string, mode: 'REPORT' | 'SEARCH'): IntelligenceAnalysisResult | null {
  // Extract metadata, issues, executive summary
  // Return structured object atau null jika parsing gagal
}

// 3. Enhance main service functions
const parsedAnalysis = parseIntelligenceResponse(reportText, mode);
if (parsedAnalysis) {
  parsedAnalysis.searchQueries = webSearchQueries;
  parsedAnalysis.webSources = sources;
  console.log('Parsed successfully:', { issuesFound: parsedAnalysis.intelligenceIssues.length });
}

// 4. Export structured analysis function
export const getStructuredIntelligenceAnalysis = async (mode, data) => {
  // Return structured data untuk canvas components atau advanced analysis
};
```

### Perbaikan Responsivitas Mobile dan Struktur Angka Romawi di IntelligenceResultDisplay - COMPLETED ✅:
- **Mobile-First Responsive Design**: 
  * Header yang adaptif dengan truncate title dan conditional subtitle
  * Padding yang responsif (p-2 sm:p-4 untuk container, p-4 sm:p-6 untuk content)
  * Height adjustment untuk mobile (h-[95vh] sm:h-[90vh])
  * Icon sizing yang responsif (w-6 h-6 sm:w-8 sm:h-8)
- **Mobile Action Menu Implementation**:
  * Desktop: Horizontal button layout dengan text labels
  * Mobile: Dropdown menu dengan MoreVertical icon trigger
  * Touch-friendly button sizing dan spacing
  * Backdrop click untuk menutup mobile menu
  * Auto-close menu setelah action (copy, print, download)
- **Enhanced Typography Responsiveness**:
  * Base text sizing: text-sm sm:text-base
  * Responsive headings: prose-h1:text-xl sm:prose-h1:text-2xl
  * Responsive spacing: prose-h1:mb-3 sm:prose-h1:mb-4
  * Table text sizing: prose-table:text-sm, prose-th:text-xs sm:prose-th:text-sm
- **Structured Roman Numeral Support**:
  * CSS styling untuk upper-roman dan lower-roman lists
  * Tailwind classes untuk nested ordered lists dengan proper indentation
  * [&_ol[style*='upper-roman']]:list-[upper-roman] untuk level I, II, III
  * [&_ol[style*='lower-roman']]:list-[lower-roman] untuk level i, ii, iii
  * Progressive margin-left untuk nested lists (ml-6 → ml-8 → ml-10 → ml-12)
- **Print Styling Enhancement**:
  * CSS untuk print window dengan proper roman numeral support
  * Margin dan padding yang sesuai untuk printed documents
  * List-style-type preservation untuk print output
- **Footer Responsiveness**:
  * Flex-col pada mobile, flex-row pada desktop
  * Responsive gap dan text sizing
  * Proper alignment untuk different screen sizes
- **Toast Notification Improvements**:
  * Responsive padding (px-3 sm:px-4)
  * Consistent text sizing (text-sm)
  * Z-index management untuk mobile menu compatibility

### Mobile UI/UX Best Practices untuk Intelligence Display:
- **Touch-Friendly Interface**: Minimum 44px touch targets untuk mobile buttons
- **Progressive Disclosure**: Hide secondary information pada mobile (subtitle, detailed labels)
- **Contextual Menus**: Dropdown pattern untuk space-constrained mobile screens
- **Responsive Typography**: Fluid text sizing dengan sm: breakpoints
- **Content Optimization**: Smaller padding dan margins untuk mobile content consumption
- **Accessibility**: Proper aria-labels dan keyboard navigation support
- **Performance**: Efficient re-renders dengan proper state management untuk mobile menu

## Task: Menambahkan Icon Intelkam untuk Agent Card Intelkam AI - COMPLETED ✅

### Deskripsi:
Menambahkan icon khusus untuk agent "Intelkam AI" menggunakan logo Intelkam Polri yang sudah tersedia di `public/img/LOGO_INTELKAM_POLRI.svg`.

### Implementasi:
- **File Modified**: `src/components/AgentCard.tsx`
- **Agent Type**: `laporan_intelejen`
- **Icon Path**: `/img/LOGO_INTELKAM_POLRI.svg`
- **Icon Size**: `h-10 w-10` (konsisten dengan icon lain)
- **Alt Text**: "Intelkam Polri"

### Code Changes:
```typescript
case 'laporan_intelejen':
  return <img src="/img/LOGO_INTELKAM_POLRI.svg" alt="Intelkam Polri" className="h-10 w-10" />;
```

### Technical Details:
- **SVG File**: Logo Intelkam Polri sudah tersedia di public directory
- **Consistent Styling**: Menggunakan ukuran yang sama dengan icon agent lain
- **Professional Appearance**: Logo resmi Intelkam untuk representasi yang tepat
- **Integration**: Terintegrasi dengan getAgentIcon function di AgentCard.tsx

### Status:
✅ **COMPLETED** - Icon Intelkam berhasil ditambahkan untuk agent Intelkam AI

## Task: Perbaikan Nama dan Deskripsi Agent Intelkam AI - COMPLETED ✅

### Deskripsi:
Memperbaiki duplikasi teks dan inkonsistensi nama agent dari "Laporan Intelejen" menjadi "Intelkam AI" untuk menghindari redundansi dan memberikan identitas yang lebih jelas.

### Perubahan yang Dilakukan:
- **Nama Agent**: "Laporan Intelejen" → "Intelkam AI"
- **Deskripsi**: Diperbaiki dari duplikasi menjadi "Asisten AI khusus untuk analisis intelijen dan penyusunan produk intelkam yang mendukung operasi keamanan kepolisian"
- **Mode Options**: "Laporan Intelijen" → "Analisis Mendalam" untuk menghindari duplikasi
- **Placeholder Text**: Diperbaiki untuk menghindari pengulangan kata "laporan intelijen"
- **Service Comments**: Updated untuk mencerminkan nama baru dan fungsi yang lebih jelas

### Technical Details:
- **File Modified**: `src/data/agents/laporanInteljenAgent.ts`
- **Service File**: `src/services/agentLaporanIntelejen.ts` (komentar diperbaiki)
- **Documentation**: `.cursorrules` updated untuk konsistensi
- **Professional Naming**: Menggunakan "Intelkam AI" yang lebih spesifik dan profesional
- **Clear Differentiation**: Membedakan antara mode "Analisis Mendalam" dan "Pencarian Produk Intelijen"

### Benefits:
- **Reduced Redundancy**: Menghilangkan duplikasi teks yang membingungkan
- **Professional Identity**: Nama yang lebih spesifik dan mudah diingat
- **Clear Functionality**: Deskripsi yang lebih jelas tentang fungsi agent
- **Consistent Branding**: Menggunakan terminologi Intelkam yang sesuai dengan logo

### Status:
✅ **COMPLETED** - Nama dan deskripsi agent berhasil diperbaiki untuk menghindari duplikasi

## Task: Implementasi Fungsi Waktu Terkini untuk Pencarian Spesifik - COMPLETED ✅

### Deskripsi:
Menambahkan fungsi waktu terkini pada agentLaporanIntelejen.ts dan mengintegrasikannya ke dalam prompt untuk pencarian yang lebih spesifik dan terkini.

### Implementasi yang Dilakukan:

#### 1. Fungsi Waktu Terkini:
- **getCurrentDateTime()**: Mendapatkan waktu terkini dalam format Indonesia dengan timezone Asia/Jakarta
- **getSearchTimeRange()**: Mendapatkan rentang waktu pencarian yang relevan (1 bulan, 3 bulan, 6 bulan, 1 tahun yang lalu)

#### 2. Enhanced Prompt Engineering:
- **Konteks Waktu Terkini**: Menambahkan informasi tanggal dan waktu saat ini dalam prompt
- **Rentang Pencarian Prioritas**: Spesifikasi rentang waktu pencarian yang jelas
- **Instruksi Pencarian Spesifik**: Prioritas pada data 3 bulan terakhir untuk laporan, 1 bulan terakhir untuk pencarian produk

#### 3. Prompt Structure Enhancement:
```typescript
**KONTEKS WAKTU TERKINI:**
- Tanggal dan waktu saat ini: ${currentDateTime}
- Rentang pencarian prioritas: ${timeRange.threeMonthsAgo} hingga ${timeRange.currentDate}
- Untuk konteks historis: maksimal hingga ${timeRange.oneYearAgo}

**INSTRUKSI PENCARIAN SPESIFIK:**
Gunakan kemampuan pencarian web Anda untuk mengumpulkan informasi yang SANGAT TERKINI dan relevan. Prioritaskan:
1. Berita dan laporan dari 3 bulan terakhir
2. Data statistik terbaru dari institusi resmi
3. Perkembangan tren dan pola kejadian terkini
4. Informasi real-time yang dapat mempengaruhi analisis
```

#### 4. Metadata Enhancement:
- **Timestamp Konsisten**: Menggunakan getCurrentDateTime() untuk semua timestamp
- **Rentang Waktu dalam Output**: Menampilkan rentang waktu pencarian dalam hasil akhir
- **Catatan Metadata**: Informasi waktu pencarian dan prioritas dalam footer laporan

#### 5. Search Priority Structure:
- **Laporan Intelijen**: Prioritas 3 bulan terakhir, maksimal 1 tahun
- **Pencarian Produk**: Prioritas 1 bulan terakhir, maksimal 6 bulan
- **Real-time Context**: Timestamp yang akurat untuk setiap pencarian

### Technical Benefits:
- **Akurasi Temporal**: Pencarian yang lebih fokus pada data terkini
- **Konsistensi Waktu**: Format waktu Indonesia yang konsisten di seluruh aplikasi
- **Prioritas Pencarian**: Struktur prioritas yang jelas untuk hasil yang lebih relevan
- **Metadata Tracking**: Tracking waktu pencarian untuk audit dan verifikasi
- **Enhanced Relevance**: Hasil pencarian yang lebih relevan dengan konteks waktu terkini

### Files Modified:
- **src/services/agentLaporanIntelejen.ts**: Implementasi fungsi waktu dan enhanced prompts
- **.cursorrules**: Dokumentasi perubahan dan pattern

### Status:
✅ **COMPLETED** - Fungsi waktu terkini berhasil diimplementasikan dengan pencarian yang lebih spesifik dan terkini

## Task: Konfigurasi Link Referensi untuk Dibuka di Tab Baru - COMPLETED ✅

### Deskripsi:
Mengkonfigurasi semua link referensi dalam hasil Intelkam AI agar selalu dibuka di tab baru untuk meningkatkan user experience dan mencegah kehilangan konteks laporan.

### Implementasi yang Dilakukan:

#### 1. Custom Renderer untuk Marked.js:
- **Link Renderer**: Membuat custom renderer untuk marked.js yang otomatis menambahkan `target="_blank"` dan `rel="noopener noreferrer"` pada semua link
- **Security Enhancement**: Menambahkan `rel="noopener noreferrer"` untuk keamanan tambahan saat membuka link eksternal
- **Title Preservation**: Mempertahankan atribut title jika ada pada link

#### 2. DOMPurify Configuration Update:
- **Allowed Attributes**: Menambahkan `href` dan `title` ke daftar atribut yang diizinkan
- **Security Maintained**: Tetap mempertahankan konfigurasi keamanan yang ketat untuk mencegah XSS
- **Link Attributes**: Memastikan `target` dan `rel` attributes diizinkan untuk link

#### 3. Post-Processing Function:
- **processLinksForNewTab()**: Fungsi tambahan untuk memproses HTML yang sudah ada
- **Regex Pattern**: Pattern matching untuk menangkap semua tag `<a>` yang belum memiliki `target="_blank"`
- **Conditional Processing**: Hanya menambahkan atribut jika belum ada untuk menghindari duplikasi
- **Comprehensive Coverage**: Memastikan semua link, baik dari markdown maupun HTML langsung, diproses

#### 4. Enhanced formatMessage Function:
- **Dual Processing**: Kombinasi custom renderer dan post-processing untuk coverage maksimal
- **Error Handling**: Maintained existing error handling untuk stability
- **Performance**: Efficient regex processing tanpa mengganggu performance

### Technical Implementation:
```typescript
// Custom renderer untuk marked.js
const renderer = new marked.Renderer();
renderer.link = function(href, title, text) {
  const titleAttr = title ? ` title="${title}"` : '';
  return `<a href="${href}"${titleAttr} target="_blank" rel="noopener noreferrer">${text}</a>`;
};

// Post-processing function
const processLinksForNewTab = (html: string): string => {
  return html.replace(/<a\s+([^>]*?)href\s*=\s*["']([^"']+)["']([^>]*?)>/gi, (match, beforeHref, href, afterHref) => {
    if (match.includes('target=')) return match;
    return `<a ${beforeHref}href="${href}"${afterHref} target="_blank" rel="noopener noreferrer">`;
  });
};
```

### Benefits:
- **Improved UX**: User tidak kehilangan konteks laporan saat mengklik link referensi
- **Security**: Link eksternal dibuka dengan `rel="noopener noreferrer"` untuk keamanan
- **Consistency**: Semua link dalam aplikasi memiliki behavior yang konsisten
- **Accessibility**: Tetap mempertahankan title attributes untuk screen readers
- **Performance**: Processing yang efficient tanpa impact signifikan pada performance

### Files Modified:
- **src/utils/markdownFormatter.ts**: Enhanced dengan custom renderer dan post-processing
- **.cursorrules**: Dokumentasi perubahan dan pattern

### Status:
✅ **COMPLETED** - Semua link referensi kini dibuka di tab baru secara otomatis

## Task: Menghilangkan Duplikasi Header Form Intelkam AI - COMPLETED ✅

### Deskripsi:
Menghilangkan duplikasi header antara halaman Agents.tsx dan IntelligenceAgentForm.tsx untuk memberikan tampilan yang lebih profesional dan menghindari redundansi informasi.

### Masalah yang Ditemukan:
- **Duplikasi Header**: Nama dan deskripsi "Intelkam AI" muncul dua kali:
  1. Di header halaman Agents.tsx (bagian atas halaman)
  2. Di dalam form IntelligenceAgentForm.tsx (header form)
- **Redundansi Visual**: Informasi yang sama ditampilkan berulang dalam jarak yang dekat

### Solusi yang Diimplementasikan:

#### 1. Penghapusan Header Form:
- **Removed Duplicate Header**: Menghapus header section di IntelligenceAgentForm.tsx yang berisi nama dan deskripsi agent
- **Clean Structure**: Form kini langsung dimulai tanpa header duplikasi
- **Maintained Context**: Informasi agent tetap tersedia di header halaman utama

#### 2. Professional Visual Enhancement:
- **Gradient Indicator Bar**: Menambahkan thin gradient bar di bagian atas form untuk visual appeal
- **Enhanced Spacing**: Menambahkan padding top (pt-8) untuk memberikan ruang yang lebih baik
- **Professional Appearance**: Form terlihat lebih clean dan profesional

#### 3. Improved User Experience:
- **Reduced Clutter**: Menghilangkan informasi redundan yang dapat membingungkan user
- **Better Focus**: User dapat langsung fokus pada form tanpa distraksi header duplikasi
- **Consistent Layout**: Layout yang lebih konsisten dengan form lainnya

### Technical Implementation:
```typescript
// Before: Form dengan header duplikasi
<div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
  <div className="bg-gradient-to-r from-indigo-50 to-blue-50 px-6 py-4 border-b border-gray-200">
    <div className="flex items-center gap-3">
      <div className="p-2 bg-indigo-100 rounded-lg">
        <Eye className="w-6 h-6 text-indigo-600" />
      </div>
      <div>
        <h2 className="text-xl font-semibold text-gray-900">{agent.name}</h2>
        <p className="text-sm text-gray-600">{agent.description}</p>
      </div>
    </div>
  </div>
  <form onSubmit={handleSubmit} className="p-6">

// After: Form clean tanpa duplikasi dengan professional indicator
<div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
  <div className="h-1 bg-gradient-to-r from-indigo-500 via-blue-500 to-indigo-600"></div>
  <form onSubmit={handleSubmit} className="p-6 pt-8">
```

### Benefits:
- **Cleaner Interface**: Interface yang lebih bersih tanpa duplikasi informasi
- **Professional Appearance**: Tampilan yang lebih profesional dengan gradient indicator
- **Better UX**: User experience yang lebih baik dengan fokus pada functionality
- **Consistent Design**: Design yang konsisten dengan prinsip minimalism
- **Reduced Cognitive Load**: Mengurangi beban kognitif user dengan menghilangkan redundansi

### Files Modified:
- **src/components/agent-forms/IntelligenceAgentForm.tsx**: Removed duplicate header, added professional indicator
- **.cursorrules**: Dokumentasi perubahan dan pattern

### Status:
✅ **COMPLETED** - Form Intelkam AI kini tampil lebih profesional tanpa duplikasi header

## Task: Cleanup TypeScript Warnings di IntelligenceAgentForm.tsx - COMPLETED ✅

### Deskripsi:
Menghapus unused imports dan parameters yang muncul setelah penghapusan header duplikasi di IntelligenceAgentForm.tsx untuk menjaga kode tetap bersih dan bebas warning.

### Warning yang Diperbaiki:
1. **Unused Import 'Eye'**: Icon Eye tidak lagi digunakan setelah penghapusan header form
2. **Unused Parameter 'agent'**: Parameter agent tidak lagi digunakan karena informasi agent sudah ditampilkan di header halaman

### Perubahan yang Dilakukan:
- **Removed Eye Import**: Menghapus import `Eye` dari lucide-react yang tidak lagi digunakan
- **Removed agent Parameter**: Menghapus parameter `agent` dari props IntelligenceAgentForm
- **Clean Code**: Memastikan tidak ada unused variables atau imports

### Technical Details:
- **File Modified**: `src/components/agent-forms/IntelligenceAgentForm.tsx`
- **Import Cleanup**: Menghapus `Eye` dari import lucide-react
- **Props Cleanup**: Menghapus `agent` parameter dari function signature
- **TypeScript Compliance**: Memastikan kode bebas dari TypeScript warnings

### Benefits:
- **Clean Code**: Kode yang lebih bersih tanpa unused imports dan variables
- **TypeScript Compliance**: Tidak ada warning TypeScript yang mengganggu development
- **Better Maintainability**: Kode yang lebih mudah dipelihara dan dipahami
- **Performance**: Sedikit peningkatan performa dengan menghapus unused imports

### Status:
✅ **COMPLETED** - TypeScript warnings berhasil dibersihkan dari IntelligenceAgentForm.tsx
