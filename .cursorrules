# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities

## API Integration Lessons

- When using FormData for file uploads, don't set Content-Type header manually - let browser handle it
- For api.reserse.id, always use VITE_API_KEY in X-API-Key header
- For flow.reserse.id, use VITE_PERKABA_API_KEY
- Set appropriate file size limits (50MB) for image uploads in nginx and vite config
- Use relative URLs with proxy in vite.config.ts instead of absolute URLs
- Add all required domains to allowedHosts in vite.config.ts (api.reserse.id, flow.reserse.id, app.reserse.id)
- Configure allowedHosts in both server and preview mode
- Use wildcard subdomain (.reserse.id) for broader access
- Set proper hostname in docker and nginx configs

## Security Lessons

- Add rate limiting in nginx (10r/s with burst 20)
- Block unnecessary paths (/webui, /geoserver, /admin, etc.)
- Add security headers (X-Frame-Options, X-Content-Type-Options, X-XSS-Protection)
- Configure robots.txt to disallow all
- Handle favicon.ico and .git requests properly
- Filter proxy paths in vite.config.ts to only allow needed routes

## Project Structure Lessons

From project.md:
- Follow consistent service pattern for new agents:
  - Service file in src/services/
  - Agent config in src/data/agents/
  - Page component in src/pages/
  - Update Sidebar.tsx and App.tsx
- Use existing components:
  - ChatInterface for chat functionality
  - AgentCard for agent display
  - BaseAgentForm for forms
- Maintain consistent styling with Tailwind CSS
- Handle chat message formatting:
  - Use flex-wrap and min-w-0 to prevent overflow
  - Add pre-wrap for code blocks and pre elements
  - Make tables scrollable horizontally
  - Use word-break and overflow-wrap for long content
- Agent configuration best practices:
  - Add descriptive icons that match agent functionality
  - Use consistent color schemes for related agents
  - Keep form heights appropriate for expected input length
  - Include clear placeholder text in form fields

## Chat Agent Implementation Pattern

When adding a new chat-based agent to the UndangUndang component, follow these steps:

1. Create Service File (src/services/[agentName]Service.ts):
 - Import env config and uuid
 - Configure API constants (API_KEY, MAX_RETRIES, etc.)
 - Implement session management
 - Implement parseResponse function for handling responses
 - Implement sendChatMessage with FormData and proper error handling
 - Add clearChatHistory and initializeSession functions

2. Update Types (src/types/index.ts):
 - Add new agent type to AgentType union (e.g., 'ciptakerja_chat')

3. Update Utils (src/utils/utils.ts):
 - Add agent ID to AGENT_IDS constant
 - Add case in getAgentTypeFromId function
 - Don't add to getTypeDisplay if it's a chat agent (these use custom display names)

4. Update Agent Card (src/components/AgentCard.tsx):
 - Add case in getAgentIcon with appropriate Lucide icon
 - Choose an icon that represents the agent's function
 - Use consistent icon size (24px)
 - Give icon an appropriate color

5. Update UndangUndang Component (src/pages/UndangUndang.tsx):
 - Import new service's sendChatMessage
 - Add agent to agents array with proper configuration
 - Add case in renderContent switch statement
 - Configure card styling:
   * Use professional color gradients
   * Maintain visual hierarchy
   * Ensure contrast and readability
   * Keep consistent hover effects
   * Match icon and colors to agent's purpose

6. Follow Best Practices:
 - Maintain consistent error handling
 - Use proper session management
 - Implement proper logging
 - Follow API security guidelines
 - Use professional color schemes appropriate for police applications
 - Ensure visual consistency with existing agents

Professional Color Scheme Examples:
- Financial Services (P2SK): blue-indigo gradient (from-blue-50 to-indigo-50)
- Criminal Law (KUHP): rose-orange gradient (from-rose-50 to-orange-50)
- Technology Law (ITE): cyan-sky gradient (from-cyan-50 to-sky-50)
- Labor Law (Cipta Kerja): slate-gray gradient (from-slate-50 to-gray-50)

## Environment Configuration Lessons

- Use default values in env.ts for critical variables
- Keep API keys secure and never log them
- Use separate keys for different services:
  - VITE_API_KEY for api.reserse.id
  - VITE_PERKABA_API_KEY for flow.reserse.id
  - VITE_OPENAI_API_KEY for OpenAI
  - etc.

## Performance Optimization Lessons

- Use code splitting with manual chunks for vendor, UI, and feature code
- Enable proper caching headers in nginx for static assets
- Configure gzip compression for text-based assets
- Preload critical assets in index.html
- Use resource hints (preconnect) for external APIs
- Optimize build settings in vite.config.ts
- Use immutable cache for versioned assets
- Disable caching for API endpoints while keeping static asset caching
- Use different cache strategies for different content types
- Keep HTTP/2 benefits without affecting API responses

## Docker Deployment Lessons

- Use multi-stage builds to reduce final image size
- Configure proper healthchecks for container monitoring
- Set resource limits to prevent container abuse
- Use nginx:alpine as production base image
- Enable logging rotation to prevent disk space issues
- Configure Docker networks with specific names and gateways
- Clean up unused networks before redeploying
- Use production-specific nginx configuration
- Use npm ci for faster, reliable builds
- Enable nginx caching for static assets
- Configure proper resource limits for production
- Use HTTP/2 for better performance
- Enable brotli compression for better compression ratios

## UI/UX Lessons

- Handle chat interface layout:
  - Use flex-wrap and min-w-0 for message containers to prevent overflow
  - Avoid nested scrollbars by using whitespace-pre-wrap and break-words
  - Use single scrollable container at the top level with proper bottom padding (pb-32)
  - Keep input area fixed at bottom with position: fixed
  - Let content flow naturally with proper word breaking
  - Keep tables and code blocks within container width
  - Use space-y utilities for consistent message spacing
  - Ensure enough bottom padding to prevent content from being hidden under input area
- Consider different AI response formats:
  - Code blocks
  - Tables
  - Long URLs
  - Formatted text
  - Lists and indentation
- Add chat-message class for consistent styling across components
- Use TypeScript interfaces for better type safety and documentation
- Remove unused imports to improve code cleanliness
- Visual consistency:
  - Use meaningful icons for each agent type
  - Maintain consistent color schemes
  - Adjust form sizes based on expected content
  - Provide clear visual hierarchy
- Agent icon implementation:
  - Icons should be defined in AgentCard.tsx's getAgentIcon function
  - Use Lucide icons consistently across all agents
  - Follow color scheme patterns (e.g., indigo for analytics, blue for research)
  - Keep icon size consistent (24px)
  - Don't define icons in individual agent files
  - Use proper icon that represents agent's function (e.g., BarChart3 for trend analysis)
  - For custom SVG icons:
    * Place SVG files in public/img directory
    * Reference in img src with absolute path from public (e.g., "/img/google-scholar.svg")
    * Keep original SVG colors if they match the design
    * Maintain consistent size with w-6 h-6 classes (24px)

## Form Implementation Lessons

### Form Display Pattern
1. Agent Configuration:
   - Define agent in src/data/agents/[agentName].ts
   - Use ExtendedAgent interface
   - Set proper id, name, type, status, and fields
   - Use 'message' as field id for text inputs
   - Use 'textarea' as const for type
   - Export as named export for consistency

2. Type Registration:
   - Add agent type to AgentType union in types/index.ts
   - Add agent ID to AGENT_IDS in utils.ts
   - Add case in getAgentTypeFromId function
   - Add case in getTypeDisplay function

3. Form Rendering:
   - Forms are rendered in Agents.tsx
   - Use switch statement on selectedAgentData.type
   - BaseAgentForm for text/textarea inputs
   - ImageAgentForm for image inputs
   - Add new agent type to appropriate case

Example agent configuration:
```typescript
export const newAgent: ExtendedAgent = {
  id: 'polri-new-agent',
  name: 'New Agent',
  description: 'Agent description',
  type: 'new_agent',
  status: 'on',
  fields: [
    {
      id: 'message',
      label: 'Input Label',
      type: 'textarea' as const,
      placeholder: 'Enter your text...'
    }
  ]
};
```

Form rendering pattern in Agents.tsx:
```typescript
switch (selectedAgentData.type) {
  case 'image':
  case 'image_processor':
    return <ImageAgentForm {...commonProps} />;
  case 'crime_trend_analyst':
    return <BaseAgentForm {...commonProps} textareaHeight="h-32" />;
  case 'new_agent':  // Add new agent here
  case 'hoax_checker':
  case 'case_research':
    return <BaseAgentForm {...commonProps} />;
  default:
    return null;
}
```

### Common Mistakes to Avoid
- Forgetting to add agent type to AgentType union
- Using wrong field id (should be 'message' for text inputs)
- Forgetting 'as const' for textarea type
- Not adding agent to switch statement in Agents.tsx
- Using default export instead of named export
- Not updating AGENT_IDS and related functions in utils.ts

## Flowise API Integration Lessons

### Memory & Session Management
1. Gunakan `overrideConfig` untuk session dan memory:
```typescript
const requestBody = {
  question: message,
  overrideConfig: {
    sessionId: currentSessionId,
    memoryKey: currentSessionId
  },
  history: chatHistory
};
```

2. Selalu inisialisasi session dengan pattern:
```typescript
let currentSessionId: string | null = null;

// Generate or retrieve session ID
if (!currentSessionId) {
  currentSessionId = `session_${uuidv4()}`;
  // Reset chat history when creating new session
  chatHistory = [];
}
```

3. Sediakan fungsi untuk mengelola session:
```typescript
// Clear history and session
export const clearChatHistory = () => {
  chatHistory = [];
  currentSessionId = null;
};

// Initialize session
export const initializeSession = () => {
  if (!currentSessionId) {
    currentSessionId = `session_${uuidv4()}`;
    chatHistory = [];
  }
};
```

4. Pastikan history terkait dengan session yang sama
5. Reset history saat membuat session baru
6. Batasi jumlah history yang disimpan (MAX_HISTORY = 10)
7. Gunakan UUID untuk generate session ID yang unik

### Request Format
1. Interface untuk request:
```typescript
interface ChatRequest {
  question: string;
  overrideConfig?: {
    sessionId: string;
    memoryKey: string;
  };
  history?: ChatMessage[];
}
```

2. Headers yang diperlukan:
```typescript
headers: {
  'Content-Type': 'application/json',
  'Authorization': `Bearer ${import.meta.env.VITE_PERKABA_API_KEY}`,
  'Accept': 'application/json'
}
```

### Logging Best Practices
1. Log request details:
```typescript
console.group('Chat API Request');
console.log('URL:', apiUrl);
console.log('Session ID:', currentSessionId);
console.log('Request Body:', JSON.stringify(requestBody, null, 2));
console.groupEnd();
```

2. Log response details:
```typescript
console.group('Chat API Response');
console.log('Status:', response.status);
console.log('Status Text:', response.statusText);
console.log('Headers:', Object.fromEntries(response.headers.entries()));
console.groupEnd();
```

3. Log errors dengan detail:
```typescript
console.group('Chat API Error');
console.error('Error Type:', error.constructor.name);
console.error('Error Message:', error.message);
console.error('Error Stack:', error.stack);
console.groupEnd();
```

### Common Mistakes to Avoid
1. Tidak menggunakan `overrideConfig` untuk session
2. Tidak me-reset history saat membuat session baru
3. Tidak menyimpan session ID
4. Tidak mengirim history ke API
5. Tidak membatasi jumlah history
6. Tidak menangani error dengan proper
7. Tidak mencatat session ID di logs

## Image Processor Agent Pattern

### Adding New Image Processor Agent
1. Service File (src/services/[agentName]Service.ts):
   - Copy structure from existing image processor service
   - Update endpoint path (/v1/playground/agents/[endpoint-name]/runs)
   - Customize message for specific use case
   - Keep error handling and response parsing consistent

2. Agent Configuration (src/data/agents/[agentName]Agent.ts):
   - Use ExtendedAgent interface
   - Set type: 'image_processor'
   - Define standard image file field
   - Keep configuration minimal for image processors

3. Integration:
   - Add to agents array in index.ts
   - Add to named exports
   - Use existing ImageAgentForm component
   - Handle in useAgentForm hook with proper agent ID check

Example Agent Setup:
```typescript
// Service endpoint pattern
const url = `/v1/playground/agents/[specific-purpose]-image-agent/runs`;

// Agent configuration pattern
export const newAgent: ExtendedAgent = {
  id: 'newagent_001',
  name: 'Agent Name',
  type: 'image_processor',
  status: 'on',
  description: 'Specific purpose description',
  fields: [
    {
      id: 'image_file',
      label: 'Upload Gambar',
      type: 'file',
      placeholder: 'Pilih file gambar...',
      accept: 'image/*'
    }
  ]
};
```

Common Mistakes:
- Using wrong endpoint path format
- Not maintaining consistent error handling
- Forgetting to add service import to useAgentForm
- Not checking agent ID in handleSubmit
- Duplicating image handling logic instead of reusing

### Service Pattern
1. Semua chat service harus mengikuti pattern yang sama
2. Gunakan interface yang konsisten
3. Kelola session dan memory dengan cara yang sama
4. Gunakan logging yang seragam
5. Handle error dengan cara yang konsisten

## Mobile UI Lessons

### Scrollable Content in Fixed Containers
1. Use flexbox layout for fixed position containers:
   ```css
   .container {
     @apply fixed inset-0 flex flex-col;
   }
   ```
2. Make content area scrollable:
   ```css
   .content {
     @apply flex-1 overflow-y-auto;
   }
   ```
3. Keep header fixed:
   ```css
   .header {
     @apply flex items-center justify-between p-4 border-b;
   }
   ```
4. Add backdrop overlay for mobile:
   ```css
   .overlay {
     @apply fixed inset-0 bg-black/20 backdrop-blur-sm z-40 lg:hidden;
   }
   ```

Common issues to avoid:
- Double scrollbars
- Content overflow on small screens
- Non-scrollable content in fixed containers
- Missing overlay for mobile interactions
- Premature component interaction before full load
- Uncontrolled reloads due to state changes

### Mobile Chat Performance
1. Component Mount Handling:
```typescript
// Track component mount state
const [isComponentMounted, setIsComponentMounted] = useState(false);

useEffect(() => {
  setIsComponentMounted(true);
}, []);

// Show loading state until component is ready
if (!isComponentMounted) {
  return <LoadingView />;
}
```

2. Scroll Optimization:
```typescript
const scrollToBottom = () => {
  requestAnimationFrame(() => {
    if (containerRef.current) {
      containerRef.current.scrollTo({
        top: containerRef.current.scrollHeight,
        behavior: 'smooth'
      });
    }
  });
};
```

3. Input Handling:
```typescript
<AIInputWithLoading
  onSubmit={handleSubmit}
  disabled={!isComponentMounted || isLoading}
  placeholder="Ketik pesan Anda..."
/>
```

4. State Management Best Practices:
- Track component mount state
- Disable interactions until fully loaded
- Use smooth scrolling with requestAnimationFrame
- Prevent multiple submissions while loading
- Clear timeouts and listeners on unmount
- Handle keyboard events properly
- Show appropriate loading states

Common issues to fix:
- Premature form submissions
- Scroll jumps during loading
- Missing loading indicators
- Unhandled component state changes
- Memory leaks from timeouts/listeners

### Mobile Navigation Protection
1. Prevent accidental chat session loss:
```typescript
// Handle navigation events
useEffect(() => {
  const handleBeforeUnload = (e: BeforeUnloadEvent) => {
    if (activeChat) {
      e.preventDefault();
      e.returnValue = '';
    }
  };

  const handlePopState = (e: PopStateEvent) => {
    if (activeChat) {
      e.preventDefault();
      if (confirm('Yakin ingin keluar? Percakapan akan hilang.')) {
        setActiveChat(null);
      } else {
        window.history.pushState(null, '', window.location.pathname);
      }
    }
  };

  window.addEventListener('beforeunload', handleBeforeUnload);
  window.addEventListener('popstate', handlePopState);

  return () => {
    window.removeEventListener('beforeunload', handleBeforeUnload);
    window.removeEventListener('popstate', handlePopState);
  };
}, [activeChat]);
```

2. Always add confirmation for back actions:
```typescript
const handleBack = () => {
  if (window.confirm('Yakin ingin kembali? Percakapan akan hilang.')) {
    setActiveChat(null);
  }
};
```

Common issues to avoid:
- Not handling browser back gesture/swipe
- Missing confirmation dialog for session loss
- Not managing browser history state properly
- Not cleaning up event listeners
- Not handling hardware back button on mobile

### Mobile-First Chat Interface Design
1. Collapsible panels untuk menghemat ruang:
```typescript
// Toggle panel visibility
<button 
  onClick={() => {
    const panel = document.getElementById('panel-id');
    if (panel) panel.classList.toggle('hidden');
  }}
  className="flex items-center gap-1"
>
  <span>Panel Title</span>
  <ChevronDownIcon className="w-4 h-4" />
</button>

// Panel yang dapat disembunyikan
<div id="panel-id" className="hidden md:block">
  {/* Panel content */}
</div>
```

2. Gunakan ukuran yang berbeda untuk mobile dan desktop:
```css
.element {
  @apply p-2 md:p-4 text-sm md:text-base;
}
```

3. Kurangi padding dan margin di mobile:
```css
.container {
  @apply p-2 md:p-4 space-y-2 md:space-y-4;
}
```

4. Gunakan ukuran ikon yang lebih kecil di mobile:
```css
.icon {
  @apply w-4 h-4 md:w-5 md:h-5;
}
```

5. Gunakan tinggi dinamis berdasarkan viewport:
```css
.chat-container {
  @apply h-[calc(100vh-12rem)] md:h-[calc(100vh-8rem)];
}
```

6. Hindari elemen UI yang menutupi konten penting:
   - Gunakan panel yang dapat disembunyikan untuk file preview
   - Kurangi ukuran header di mobile
   - Prioritaskan area chat dengan memberikan lebih banyak ruang
   - Gunakan tombol toggle untuk menampilkan/menyembunyikan panel sekunder

7. Optimasi untuk layar kecil:
   - Gunakan input yang lebih compact
   - Kurangi teks label menjadi lebih singkat
   - Gunakan ikon sebagai pengganti teks jika memungkinkan
   - Terapkan truncate untuk teks yang panjang

8. Gunakan JavaScript untuk toggle panel di mobile:
```typescript
// Tambahkan ID ke panel
<div id="file-preview-container" className="hidden md:flex">
  {/* File previews */}
</div>

// Gunakan toggle button
<button onClick={() => {
  const panel = document.getElementById('file-preview-container');
  if (panel) panel.classList.toggle('hidden');
}}>
  Toggle Files
</button>
```

# Scratchpad

Current Task: Optimizing Mobile UI for PDF/Image Analysis Chat Interface

[X] Memperbesar area chat untuk mode tanya jawab dokumen
[X] Membuat header lebih compact di mobile
[X] Membuat panel file yang dapat disembunyikan (collapsible)
[X] Mengoptimalkan input area untuk mobile
[X] Menghapus variabel state yang tidak digunakan (filesUploaded)
[X] Menambahkan pembelajaran ke .cursorrules
[X] Mengubah ikon dokumen berdasarkan jenis file yang diupload
[X] Memperbaiki error TypeScript untuk variabel yang tidak digunakan
[X] Memperbaiki error TypeScript di service files (MAX_RETRIES, RETRY_DELAY)
[X] Mengimplementasikan dukungan multi-dokumen (maksimal 5) dalam mode tanya jawab
[X] Mengimplementasikan pengelolaan file sementara dan pembersihan otomatis
[X] Menambahkan fitur citation untuk hasil analisis dokumen

Refleksi:
- Berhasil mengimplementasikan tampilan mobile yang lebih optimal
- Menggunakan pendekatan collapsible panel untuk file preview
- Menerapkan responsive design dengan breakpoint md:
- Memprioritaskan area chat dengan memberikan lebih banyak ruang
- Mengurangi ukuran elemen UI di mobile untuk menghemat ruang
- Menambahkan ikon yang berbeda berdasarkan jenis file untuk meningkatkan UX
- Membersihkan kode dengan menghapus variabel yang tidak digunakan
- Memperbaiki error TypeScript di service files untuk meningkatkan kualitas kode
- Mengimplementasikan dukungan multi-dokumen dengan batas maksimal 5 dokumen
- Memperbaiki pengelolaan state untuk dokumen yang diupload
- Menambahkan sistem pengelolaan file sementara dengan pembersihan otomatis
- Mencegah memory leak dengan membersihkan URL objek file
- Menambahkan fitur citation untuk meningkatkan kredibilitas hasil analisis

Pembelajaran:
- Gunakan collapsible panel untuk konten sekunder di mobile
- Terapkan ukuran yang berbeda untuk mobile dan desktop dengan breakpoint
- Prioritaskan konten utama (area chat) dengan memberikan lebih banyak ruang
- Kurangi padding dan margin di mobile
- Gunakan JavaScript sederhana untuk toggle panel
- Gunakan ikon yang berbeda berdasarkan jenis file untuk meningkatkan UX
- Buat fungsi helper untuk mengelola ikon berdasarkan tipe file
- Perhatikan peringatan TypeScript tentang variabel yang tidak digunakan
- Impor hanya ikon yang benar-benar digunakan untuk mengurangi ukuran bundle
- Hapus konstanta yang tidak digunakan dalam service files untuk menghindari kebingungan
- Jika implementasi retry logic diperlukan di masa depan, tambahkan kembali konstanta yang relevan
- Gunakan array objek untuk menyimpan konten dokumen yang diproses dengan metadata
- Validasi jumlah maksimum dokumen yang dapat diupload
- Gabungkan file yang sudah ada dengan file baru saat mengupload dokumen tambahan
- Gunakan operator !! untuk mengkonversi nilai ke boolean saat diperlukan oleh TypeScript
- Selalu bersihkan URL objek file dengan URL.revokeObjectURL() untuk mencegah memory leak
- Implementasikan sistem timeout untuk membersihkan sumber daya yang tidak digunakan
- Gunakan useEffect cleanup function untuk membersihkan sumber daya saat komponen di-unmount
- Simpan URL objek file dalam array terpisah untuk memudahkan pembersihan
- Periksa kembali variabel yang dideklarasikan tetapi tidak digunakan setelah refactoring kode
- Ekspor interface yang digunakan di beberapa file untuk memastikan konsistensi tipe data
- Tambahkan fitur citation untuk meningkatkan kredibilitas hasil analisis
- Gunakan toggle untuk menampilkan/menyembunyikan informasi tambahan seperti citation
- Sertakan informasi citation dalam hasil cetak untuk dokumentasi yang lengkap
- Tambahkan ikon hover pada elemen yang dapat diinteraksi untuk meningkatkan feedback visual
- Gunakan state untuk melacak elemen yang sedang di-hover untuk menampilkan UI tambahan
- Tingkatkan tampilan citation dengan layout card yang lebih menarik dan informatif
- Pastikan untuk meneruskan prop onSubmit ke BaseAgentForm agar tombol submit berfungsi
- Tambahkan pengecekan isProcessing dan isDisabled dalam handler onClick tombol submit
